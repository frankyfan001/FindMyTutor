#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend-express:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// derived from tutorial: https://www.youtube.com/watch?v=oxFr7we3LC8&t=1582s
/**
 *  Socket for video chat.
 */
var io = require("socket.io")(server, 
  { cors: {
        origin: "*",
        methods: [ "GET", "POST" ]
    }
  });

io.on("connection", function (socket) {
  socket.emit("me", socket.id);
  console.log(socket.id);

  socket.on("disconnect", function () {
    socket.broadcast.emit("callEnded")
  });

  socket.on("makeCall", function ({callee, signalData, caller, name}) {
    io.to(callee).emit("makeCall", {signal: signalData, caller, name});
  });

  socket.on("answerCall", function (data) {
    io.to(data.callee).emit("callAccepted", data.signal)
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
