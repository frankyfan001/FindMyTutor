import PropTypes from 'prop-types';
import React, { Component } from 'react';
import styled, { ThemeConsumer, ThemeProvider } from 'styled-components';
import { Text, Heading, Flex, Box, Button, Link, Image, Card } from 'rebass';
import Spectra from 'spectra';
import { createSlotComponents } from 'react-slot-props';

var BannerRelations = [{
  type: 'ReactBanners',
  root: true,
  elements: ['Cards', 'Blocks', 'Box'],
  areas: ['Title', 'Texture']
}, {
  type: 'Title'
}, {
  type: 'SubTitle'
}, {
  type: 'Box'
}, {
  type: 'Description'
}, {
  type: 'Image'
}, {
  type: 'Cards',
  elements: ['Card']
}, {
  type: 'Blocks',
  elements: ['Block']
}, {
  type: 'Card',
  areas: ['Title', 'SubTitle', 'Description', 'Image']
}, {
  type: 'Block',
  areas: ['Title', 'SubTitle', 'Description', 'Image']
}, {
  type: 'Texture'
}];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var noop = function noop(n) {
  return n;
};

var propTypes = {
  numberOrString: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  responsive: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array])
};
var defaultBreakpoints = [40, 52, 64].map(function (n) {
  return n + 'em';
});
var is = function is(n) {
  return n !== undefined && n !== null;
};
var num = function num(n) {
  return typeof n === 'number' && !isNaN(n);
};
var px = function px(n) {
  return num(n) ? n + 'px' : n;
};
var get = function get(obj) {
  for (var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    paths[_key - 1] = arguments[_key];
  }

  return paths.join('.').split('.').reduce(function (a, b) {
    return a && a[b] ? a[b] : null;
  }, obj);
};
var cloneFunc = function cloneFunc(fn) {
  return function () {
    return fn.apply(void 0, arguments);
  };
};
var merge = function merge(a, b) {
  return Object.assign({}, a, b, Object.keys(b || {}).reduce(function (obj, key) {
    var _Object$assign;

    return Object.assign(obj, (_Object$assign = {}, _Object$assign[key] = a[key] !== null && typeof a[key] === 'object' ? merge(a[key], b[key]) : b[key], _Object$assign));
  }, {}));
};
var compose = function compose() {
  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    funcs[_key2] = arguments[_key2];
  }

  var fn = function fn(props) {
    return funcs.map(function (fn) {
      return fn(props);
    }).filter(Boolean).reduce(merge, {});
  };

  fn.propTypes = funcs.map(function (fn) {
    return fn.propTypes;
  }).reduce(merge, {});
  return fn;
};
var createMediaQuery = function createMediaQuery(n) {
  return "@media screen and (min-width: " + n + ")";
};
var style = function style(_ref) {
  var _fn$propTypes;

  var prop = _ref.prop,
      cssProperty = _ref.cssProperty,
      key = _ref.key,
      getter = _ref.getter,
      transformValue = _ref.transformValue,
      _ref$scale = _ref.scale,
      defaultScale = _ref$scale === void 0 ? {} : _ref$scale;
  var css = cssProperty || prop;
  var transform = transformValue || getter || noop;

  var fn = function fn(props) {
    var val = props[prop];
    if (!is(val)) return null;
    var scale = get(props.theme, key) || defaultScale;

    var style = function style(n) {
      var _ref2;

      return is(n) ? (_ref2 = {}, _ref2[css] = transform(get(scale, n) || n), _ref2) : null;
    };

    if (!Array.isArray(val)) {
      return style(val);
    } // how to hoist this up??


    var breakpoints = [null].concat((get(props.theme, 'breakpoints') || defaultBreakpoints).map(createMediaQuery));
    var styles = {};

    for (var i = 0; i < val.length; i++) {
      var media = breakpoints[i];

      if (!media) {
        styles = style(val[i]) || {};
        continue;
      }

      var rule = style(val[i]);
      if (!rule) continue;
      styles[media] = rule;
    }

    return styles;
  };

  fn.propTypes = (_fn$propTypes = {}, _fn$propTypes[prop] = cloneFunc(propTypes.responsive), _fn$propTypes);
  fn.propTypes[prop].meta = {
    prop: prop,
    themeKey: key,
    styleType: 'responsive'
  };
  return fn;
};
var getWidth = function getWidth(n) {
  return !num(n) || n > 1 ? px(n) : n * 100 + '%';
}; // variant

var variant = function variant(_ref3) {
  var _fn$propTypes2;

  var key = _ref3.key,
      _ref3$prop = _ref3.prop,
      prop = _ref3$prop === void 0 ? 'variant' : _ref3$prop;

  var fn = function fn(props) {
    return get(props.theme, key, props[prop]) || null;
  };

  fn.propTypes = (_fn$propTypes2 = {}, _fn$propTypes2[prop] = propTypes.numberOrString, _fn$propTypes2);
  return fn;
};

var isNegative = function isNegative(n) {
  return n < 0;
};

var REG = /^[mp][trblxy]?$/;
var properties = {
  m: 'margin',
  p: 'padding'
};
var directions = {
  t: 'Top',
  r: 'Right',
  b: 'Bottom',
  l: 'Left',
  x: ['Left', 'Right'],
  y: ['Top', 'Bottom']
};

var getProperties = function getProperties(key) {
  var _key$split = key.split(''),
      a = _key$split[0],
      b = _key$split[1];

  var property = properties[a];
  var direction = directions[b] || '';
  return Array.isArray(direction) ? direction.map(function (dir) {
    return property + dir;
  }) : [property + direction];
};

var getValue = function getValue(scale) {
  return function (n) {
    if (!num(n)) {
      return scale[n] || n;
    }

    var abs = Math.abs(n);
    var neg = isNegative(n);
    var value = scale[abs] || abs;

    if (!num(value)) {
      return neg ? '-' + value : value;
    }

    return px(value * (neg ? -1 : 1));
  };
};

var defaultScale = [0, 4, 8, 16, 32, 64, 128, 256, 512];
var space = function space(props) {
  var keys = Object.keys(props).filter(function (key) {
    return REG.test(key);
  }).sort();
  var scale = get(props.theme, 'space') || defaultScale;
  var getStyle = getValue(scale);
  return keys.map(function (key) {
    var value = props[key];
    var properties = getProperties(key);

    var style = function style(n) {
      return is(n) ? properties.reduce(function (a, prop) {
        var _extends2;

        return _extends({}, a, (_extends2 = {}, _extends2[prop] = getStyle(n), _extends2));
      }, {}) : null;
    };

    if (!Array.isArray(value)) {
      return style(value);
    }

    var breakpoints = [null].concat((get(props.theme, 'breakpoints') || defaultBreakpoints).map(createMediaQuery));
    var styles = {};

    for (var i = 0; i < value.length; i++) {
      var media = breakpoints[i];

      if (!media) {
        styles = style(value[i]) || {};
        continue;
      }

      var rule = style(value[i]);
      if (!rule) continue;
      styles[media] = rule;
    }

    return styles;
  }).reduce(merge, {});
};
space.propTypes = {
  m: cloneFunc(propTypes.responsive),
  mt: cloneFunc(propTypes.responsive),
  mr: cloneFunc(propTypes.responsive),
  mb: cloneFunc(propTypes.responsive),
  ml: cloneFunc(propTypes.responsive),
  mx: cloneFunc(propTypes.responsive),
  my: cloneFunc(propTypes.responsive),
  p: cloneFunc(propTypes.responsive),
  pt: cloneFunc(propTypes.responsive),
  pr: cloneFunc(propTypes.responsive),
  pb: cloneFunc(propTypes.responsive),
  pl: cloneFunc(propTypes.responsive),
  px: cloneFunc(propTypes.responsive),
  py: cloneFunc(propTypes.responsive)
};

var meta = function meta(prop) {
  return {
    prop: prop,
    themeKey: 'space',
    styleType: 'responsive'
  };
};

Object.keys(space.propTypes).forEach(function (prop) {
  space.propTypes[prop].meta = meta(prop);
}); // styles

var width = style({
  prop: 'width',
  transformValue: getWidth
});
var fontSize = style({
  prop: 'fontSize',
  key: 'fontSizes',
  transformValue: px,
  scale: [12, 14, 16, 20, 24, 32, 48, 64, 72]
});
var textColor = style({
  prop: 'color',
  key: 'colors'
});
var bgColor = style({
  prop: 'bg',
  cssProperty: 'backgroundColor',
  key: 'colors'
});
var color = compose(textColor, bgColor); // typography

var fontFamily = style({
  prop: 'fontFamily',
  key: 'fonts'
});
var textAlign = style({
  prop: 'textAlign'
});
var lineHeight = style({
  prop: 'lineHeight',
  key: 'lineHeights'
});
var fontWeight = style({
  prop: 'fontWeight',
  key: 'fontWeights'
});
var fontStyle = style({
  prop: 'fontStyle'
});
var letterSpacing = style({
  prop: 'letterSpacing',
  key: 'letterSpacings',
  transformValue: px
}); // layout

var display = style({
  prop: 'display'
});
var maxWidth = style({
  prop: 'maxWidth',
  key: 'maxWidths',
  transformValue: px
});
var minWidth = style({
  prop: 'minWidth',
  key: 'minWidths',
  transformValue: px
});
var height = style({
  prop: 'height',
  key: 'heights',
  transformValue: px
});
var maxHeight = style({
  prop: 'maxHeight',
  key: 'maxHeights',
  transformValue: px
});
var minHeight = style({
  prop: 'minHeight',
  key: 'minHeights',
  transformValue: px
});
var sizeWidth = style({
  prop: 'size',
  cssProperty: 'width',
  transformValue: px
});
var sizeHeight = style({
  prop: 'size',
  cssProperty: 'height',
  transformValue: px
});
var size = compose(sizeHeight, sizeWidth);
var ratioPadding = style({
  prop: 'ratio',
  cssProperty: 'paddingBottom',
  transformValue: function transformValue(n) {
    return n * 100 + '%';
  }
});
var ratio = function ratio(props) {
  return props.ratio ? _extends({
    height: 0
  }, ratioPadding(props)) : null;
};
ratio.propTypes = _extends({}, ratioPadding.propTypes);
var verticalAlign = style({
  prop: 'verticalAlign'
}); // flexbox

var alignItems = style({
  prop: 'alignItems'
});
var alignContent = style({
  prop: 'alignContent'
});
var justifyItems = style({
  prop: 'justifyItems'
});
var justifyContent = style({
  prop: 'justifyContent'
});
var flexWrap = style({
  prop: 'flexWrap'
});
var flexBasis = style({
  prop: 'flexBasis',
  transformValue: getWidth
});
var flexDirection = style({
  prop: 'flexDirection'
});
var flex = style({
  prop: 'flex'
});
var justifySelf = style({
  prop: 'justifySelf'
});
var alignSelf = style({
  prop: 'alignSelf'
});
var order = style({
  prop: 'order'
}); // grid

var gridGap = style({
  prop: 'gridGap',
  transformValue: px,
  key: 'space'
});
var gridColumnGap = style({
  prop: 'gridColumnGap',
  transformValue: px,
  key: 'space'
});
var gridRowGap = style({
  prop: 'gridRowGap',
  transformValue: px,
  key: 'space'
});
var gridColumn = style({
  prop: 'gridColumn'
});
var gridRow = style({
  prop: 'gridRow'
});
var gridAutoFlow = style({
  prop: 'gridAutoFlow'
});
var gridAutoColumns = style({
  prop: 'gridAutoColumns'
});
var gridAutoRows = style({
  prop: 'gridAutoRows'
});
var gridTemplateColumns = style({
  prop: 'gridTemplateColumns'
});
var gridTemplateRows = style({
  prop: 'gridTemplateRows'
});
var gridTemplateAreas = style({
  prop: 'gridTemplateAreas'
});
var gridArea = style({
  prop: 'gridArea'
}); // borders

var getBorder = function getBorder(n) {
  return num(n) && n > 0 ? n + 'px solid' : n;
};

var border = style({
  prop: 'border',
  key: 'borders',
  transformValue: getBorder
});
var borderTop = style({
  prop: 'borderTop',
  key: 'borders',
  transformValue: getBorder
});
var borderRight = style({
  prop: 'borderRight',
  key: 'borders',
  transformValue: getBorder
});
var borderBottom = style({
  prop: 'borderBottom',
  key: 'borders',
  transformValue: getBorder
});
var borderLeft = style({
  prop: 'borderLeft',
  key: 'borders',
  transformValue: getBorder
});
var borders = compose(border, borderTop, borderRight, borderBottom, borderLeft);
var borderColor = style({
  prop: 'borderColor',
  key: 'colors'
});
var borderRadius = style({
  prop: 'borderRadius',
  key: 'radii',
  transformValue: px
});
var boxShadow = style({
  prop: 'boxShadow',
  key: 'shadows'
});
var opacity = style({
  prop: 'opacity'
});
var overflow = style({
  prop: 'overflow'
}); // backgrounds

var background = style({
  prop: 'background'
});
var backgroundImage = style({
  prop: 'backgroundImage'
});
var backgroundSize = style({
  prop: 'backgroundSize'
});
var backgroundPosition = style({
  prop: 'backgroundPosition'
});
var backgroundRepeat = style({
  prop: 'backgroundRepeat'
}); // position

var position = style({
  prop: 'position'
});
var zIndex = style({
  prop: 'zIndex'
});
var top = style({
  prop: 'top',
  transformValue: px
});
var right = style({
  prop: 'right',
  transformValue: px
});
var bottom = style({
  prop: 'bottom',
  transformValue: px
});
var left = style({
  prop: 'left',
  transformValue: px
});
var textStyle = variant({
  prop: 'textStyle',
  key: 'textStyles'
});
var colorStyle = variant({
  prop: 'colors',
  key: 'colorStyles'
});
var buttonStyle = variant({
  key: 'buttons'
});
var styles = {
  space: space,
  width: width,
  fontSize: fontSize,
  textColor: textColor,
  bgColor: bgColor,
  color: color,
  fontFamily: fontFamily,
  textAlign: textAlign,
  lineHeight: lineHeight,
  fontWeight: fontWeight,
  fontStyle: fontStyle,
  letterSpacing: letterSpacing,
  display: display,
  maxWidth: maxWidth,
  minWidth: minWidth,
  height: height,
  maxHeight: maxHeight,
  minHeight: minHeight,
  sizeWidth: sizeWidth,
  sizeHeight: sizeHeight,
  size: size,
  ratioPadding: ratioPadding,
  ratio: ratio,
  verticalAlign: verticalAlign,
  alignItems: alignItems,
  alignContent: alignContent,
  justifyItems: justifyItems,
  justifyContent: justifyContent,
  flexWrap: flexWrap,
  flexBasis: flexBasis,
  flexDirection: flexDirection,
  flex: flex,
  justifySelf: justifySelf,
  alignSelf: alignSelf,
  order: order,
  gridGap: gridGap,
  gridColumnGap: gridColumnGap,
  gridRowGap: gridRowGap,
  gridColumn: gridColumn,
  gridRow: gridRow,
  gridAutoFlow: gridAutoFlow,
  gridAutoColumns: gridAutoColumns,
  gridAutoRows: gridAutoRows,
  gridTemplateColumns: gridTemplateColumns,
  gridTemplateRows: gridTemplateRows,
  gridTemplateAreas: gridTemplateAreas,
  gridArea: gridArea,
  // borders
  border: border,
  borderTop: borderTop,
  borderRight: borderRight,
  borderBottom: borderBottom,
  borderLeft: borderLeft,
  borders: borders,
  borderColor: borderColor,
  borderRadius: borderRadius,
  boxShadow: boxShadow,
  opacity: opacity,
  overflow: overflow,
  background: background,
  backgroundImage: backgroundImage,
  backgroundPosition: backgroundPosition,
  backgroundRepeat: backgroundRepeat,
  backgroundSize: backgroundSize,
  position: position,
  zIndex: zIndex,
  top: top,
  right: right,
  bottom: bottom,
  left: left,
  textStyle: textStyle,
  colorStyle: colorStyle,
  buttonStyle: buttonStyle // mixed

};

var funcs = Object.keys(styles).map(function (key) {
  return styles[key];
}).filter(function (fn) {
  return typeof fn === 'function';
});
var blacklist = funcs.reduce(function (a, fn) {
  return a.concat(Object.keys(fn.propTypes || {}));
}, ['theme']);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends$1 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var themeable = function themeable() {
  return function (Target) {
    return function (props) {
      return React.createElement(
        ThemeConsumer,
        null,
        function (theme) {
          return React.createElement(Target, _extends$1({}, props, { theme: theme }));
        }
      );
    };
  };
};

var themed = function themed(key) {
  return function (props) {
    return props.theme[key];
  };
};

var Text$1 = themeable()(Text);

var Heading$1 = themeable()(Heading);

var Flex$1 = themeable()(Flex);

var _Box = themeable()(Box);

var Box$1 = themeable()(styled(_Box)(minWidth, maxWidth));

var Button$1 = themeable()(Button);

var Link$1 = themeable()(Link);

var Image$1 = themeable()(Image);

var _Card = themeable()(Card);

var Card$1 = themeable()(styled(_Card)(minWidth, maxWidth));

var Block = themeable()(styled(Box)(minWidth, maxWidth, themed('Block')));

/**
 *
 * @param  {...Function} args
 */

var getWidth$1 = function getWidth(colNum) {
  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'card';

  if (colNum === 1) {
    return type === 'card' ? '70%' : 'calc(100% - 80px)';
  }
  return 'calc(' + 1 / colNum * 100 + '% - ' + margin * 2 + 'px - ' + padding * 2 + 'px)';
};

var defaultThemes = {
  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],
  breakpoints: ['40em', '52em', '60em', '64em'],
  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72],
  Card: '\n  box-shadow: rgba(31,56,88,0.15) 0px 2px 10px;\n  background-color: #ffffff;\n  border-radius: 6px;\n  padding:30px;\n  margin:20px;\n  ',
  Block: '\n  margin:0 20px;\n  ',
  Heading: '\n  line-height:1.5;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  ',
  Text: '\n  line-height: 1.7;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  ',
  Button: '\n  transition:all .35s ease-in-out;\n  &:hover{\n    transform:translateY(-5px);\n    box-shadow:0 10px 20px rgba(102, 102, 102, 0.25);\n  }\n  ',
  Link: '\n  text-decoration:none !important;\n  cursor:pointer;\n  display:block;\n  transition:all .35s ease-in-out;\n  &:hover{\n    transform:translateY(-5px);\n  }\n  '
};

var layoutIs = function layoutIs(type, contains) {
  return contains.indexOf(type) > -1;
};

var renderChild = function renderChild(child) {
  return typeof child === 'function' ? child() : child;
};

var SmartContent = function (_Component) {
  inherits(SmartContent, _Component);

  function SmartContent() {
    classCallCheck(this, SmartContent);
    return possibleConstructorReturn(this, (SmartContent.__proto__ || Object.getPrototypeOf(SmartContent)).apply(this, arguments));
  }

  createClass(SmartContent, [{
    key: 'getTextAlign',
    value: function getTextAlign() {
      var imageAlign = this.props.imageAlign;

      if (layoutIs(imageAlign, ['top', 'bottom'])) {
        return 'center';
      } else if (layoutIs(imageAlign, ['left', 'right'])) {
        return 'left';
      }
      return 'left';
    }
  }, {
    key: 'getFlexDirection',
    value: function getFlexDirection() {
      var imageAlign = this.props.imageAlign;

      if (layoutIs(imageAlign, ['top', 'bottom'])) {
        return 'column';
      } else if (layoutIs(imageAlign, ['left', 'right'])) {
        return 'row';
      }
      return 'row';
    }
  }, {
    key: 'getTitleSize',
    value: function getTitleSize(fontSize) {
      var itemSize = this.props.itemSize;

      if (itemSize > 1) {
        return fontSize.map(function (i) {
          return i - 2 > 1 ? i - 2 : 2;
        });
      } else {
        return fontSize;
      }
    }
  }, {
    key: 'getImageWidth',
    value: function getImageWidth(width) {
      var _props = this.props,
          itemSize = _props.itemSize,
          imageAlign = _props.imageAlign;

      if (itemSize > 1) {
        return ['25%', '25%', '25%', width || '25%'];
      } else {
        return [layoutIs(imageAlign, ['left', 'top']) ? width || '50%' : '100%', layoutIs(imageAlign, ['left', 'top']) ? width || '50%' : '100%', layoutIs(imageAlign, ['left', 'top']) ? width || '50%' : '100%', layoutIs(imageAlign, ['left', 'right']) ? width || '50%' : '50%'];
      }
    }
  }, {
    key: 'getTextColor',
    value: function getTextColor(color, type) {
      if (color) {
        switch (type) {
          case 'title':
            return color;
          case 'subTitle':
            return Spectra(color).alpha(0.8).rgbaString();
          case 'description':
            return Spectra(color).alpha(0.65).rgbaString();
        }
      }
      return color;
    }
  }, {
    key: 'getTextBoxWidth',
    value: function getTextBoxWidth() {
      var _props2 = this.props,
          itemSize = _props2.itemSize,
          imageAlign = _props2.imageAlign,
          textWidth = _props2.textWidth;

      return ['auto', 'auto', 'auto', textWidth];
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var _this2 = this;

      var _props3 = this.props,
          path = _props3.path,
          slot = _props3.slot,
          imageAlign = _props3.imageAlign,
          textColor = _props3.textColor,
          imageWidth = _props3.imageWidth;

      var isVertical = layoutIs(imageAlign, ['top', 'bottom']);
      return React.createElement(
        Flex$1,
        {
          justifyContent: 'center',
          alignItems: 'center',
          flexDirection: ['column', 'column', 'column', this.getFlexDirection()],
          py: 20
        },
        layoutIs(imageAlign, ['top', 'left']) && slot.render(path + '.image', function (render, props) {
          return React.createElement(
            Box$1,
            {
              pb: [20, 20, 20, isVertical ? 20 : 0],
              minWidth: _this2.getImageWidth(props.width || props.style && props.style.width || imageWidth),
              maxWidth: _this2.getImageWidth(props.width || props.style && props.style.width || imageWidth)
            },
            props.children ? renderChild(props.children) : React.createElement(Image$1, _extends$1({}, props, { width: '100%' }))
          );
        }),
        React.createElement(
          Box$1,
          {
            px: [0, 0, 0, isVertical ? 0 : 20],
            className: 'banner-text-box',
            width: this.getTextBoxWidth()
          },
          slot.render(path + '.title', function (render, props) {
            return React.createElement(
              Heading$1,
              _extends$1({
                fontSize: _this2.getTitleSize([5, 5, 6, 6]),
                fontWeight: 400,
                color: _this2.getTextColor(props.color || props.style && props.style.color || textColor, 'title'),
                textAlign: ['center', 'center', 'center', _this2.getTextAlign()]
              }, props),
              render()
            );
          }),
          slot.render(path + '.sub_title', function (render, props) {
            return React.createElement(
              Heading$1,
              _extends$1({
                fontSize: _this2.getTitleSize([3, 3, 5, 5]),
                fontWeight: 'lighter',
                color: _this2.getTextColor(props.color || props.style && props.style.color || textColor, 'subTitle'),
                textAlign: ['center', 'center', 'center', _this2.getTextAlign()],
                mb: '2%'
              }, props),
              render()
            );
          }),
          slot.render(path + '.description', function (render, props) {
            return React.createElement(
              Text$1,
              _extends$1({
                fontSize: 1,
                color: _this2.getTextColor(props.color || props.style && props.style.color || textColor, 'description'),
                fontWeight: 'lighter',
                textAlign: ['center', 'center', 'center', _this2.getTextAlign()]
              }, props),
              render()
            );
          })
        ),
        layoutIs(imageAlign, ['right', 'bottom']) && slot.render(path + '.image', function (render, props) {
          return React.createElement(
            Box$1,
            {
              py: [20, 20, 20, isVertical ? 20 : 0],
              minWidth: _this2.getImageWidth(props.width || props.style && props.style.width || imageWidth),
              maxWidth: _this2.getImageWidth(props.width || props.style && props.style.width || imageWidth),
              style: {
                flexShrink: 3
              }
            },
            props.children ? renderChild(props.children) : React.createElement(Image$1, _extends$1({}, props, { width: '100%' }))
          );
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          href = _props4.href,
          target = _props4.target;

      if (href) {
        return React.createElement(
          Link$1,
          { href: href, target: target },
          this.renderContent()
        );
      } else {
        return this.renderContent();
      }
    }
  }]);
  return SmartContent;
}(Component);

SmartContent.defaultProps = {
  imageAlign: 'left',
  textColor: '#333'
};

var _class = function (_Component) {
  inherits(_class, _Component);

  function _class() {
    classCallCheck(this, _class);
    return possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  createClass(_class, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          ghost = _props.ghost,
          className = _props.className,
          _props$color = _props.color,
          _color = _props$color === undefined ? '#666' : _props$color;

      return React.createElement(
        Button$1,
        {
          fontWeight: ghost ? 'normal' : 'lighter',
          borderRadius: 100,
          border: ghost ? '1px solid ' + _color : 'none',
          px: 30,
          mr: 10,
          style: {
            backgroundColor: ghost ? 'transparent' : _color,
            color: ghost ? _color : Spectra(_color).lighten(80),
            cursor: 'pointer'
          }
        },
        children
      );
    }
  }]);
  return _class;
}(Component);

var ReactBanners = function (_Component) {
  inherits(ReactBanners, _Component);

  function ReactBanners() {
    classCallCheck(this, ReactBanners);
    return possibleConstructorReturn(this, (ReactBanners.__proto__ || Object.getPrototypeOf(ReactBanners)).apply(this, arguments));
  }

  createClass(ReactBanners, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          slot = _props.slot,
          others = objectWithoutProperties(_props, ['slot']);

      return React.createElement(
        ThemeProvider,
        { theme: defaultThemes },
        React.createElement(
          Box$1,
          _extends$1({}, others, { style: _extends$1({ position: 'relative' }, others.style) }),
          slot.render('areas.title', function (render, props) {
            return React.createElement(
              Flex$1,
              {
                alignItems: 'center',
                style: { zIndex: 1 },
                justifyContent: 'center',
                p: 20,
                pb: 40
              },
              React.createElement(
                Heading$1,
                _extends$1({ fontSize: 5, fontWeight: 400 }, props),
                render()
              )
            );
          }),
          slot.render('elements', function (render, props, type, key) {
            var path = 'elements[' + key + ']';
            switch (type) {
              case 'Cards':
                var cardProps = props;
                return React.createElement(
                  Flex$1,
                  _extends$1({
                    flexWrap: 'wrap',
                    style: { zIndex: 1 },
                    justifyContent: 'space-around'
                  }, cardProps),
                  slot.render(path + '.elements', function (render, props, type, key) {
                    return React.createElement(
                      Card$1,
                      _extends$1({
                        minWidth: ['calc(100% - 90px)', 'calc(100% - 110px)', 'calc(100% - 110px)', getWidth$1(slot(path + '.elements.length'), 20, 30, 'card')],
                        maxWidth: getWidth$1(slot(path + '.elements.length'), 20, 30, 'card')
                      }, props),
                      React.createElement(SmartContent, {
                        imageAlign: props.imageAlign || cardProps.imageAlign,
                        textColor: props.textColor || cardProps.textColor,
                        textWidth: props.textWidth || cardProps.textWidth,
                        imageWidth: props.imageWidth || cardProps.imageWidth,
                        href: props.href,
                        itemSize: slot(path + '.elements.length'),
                        path: path + '.elements[' + key + '].areas',
                        slot: slot
                      })
                    );
                  })
                );
              case 'Blocks':
                var blockProps = props;
                return React.createElement(
                  Flex$1,
                  _extends$1({
                    flexWrap: 'wrap',
                    style: { zIndex: 1 },
                    justifyContent: 'space-around',
                    px: [0, 0, 0, 20]
                  }, blockProps),
                  slot.render(path + '.elements', function (render, props, type, key) {
                    return React.createElement(
                      Block,
                      _extends$1({
                        minWidth: ['calc(100% - 90px)', 'calc(100% - 110px)', 'calc(100% - 110px)', getWidth$1(slot(path + '.elements.length'), 20, 0, 'block')],
                        maxWidth: getWidth$1(slot(path + '.elements.length'), 20, 0, 'block')
                      }, props),
                      React.createElement(SmartContent, {
                        imageAlign: props.imageAlign || blockProps.imageAlign,
                        textColor: props.textColor || blockProps.textColor,
                        textWidth: props.textWidth || blockProps.textWidth,
                        imageWidth: props.imageWidth || blockProps.imageWidth,
                        href: props.href,
                        itemSize: slot(path + '.elements.length'),
                        path: path + '.elements[' + key + '].areas',
                        slot: slot
                      })
                    );
                  })
                );
              case 'Box':
                return React.createElement(
                  Box$1,
                  props,
                  render()
                );
            }
          }),
          slot.render('areas.texture', function (render, props) {
            return React.createElement(
              Box$1,
              _extends$1({}, props, {
                className: 'banners-texture',
                style: _extends$1({}, props.style, {
                  position: 'absolute',
                  zIndex: -1,
                  left: props.x || props.left || 0,
                  top: props.y || props.top || 0
                })
              }),
              render()
            );
          })
        )
      );
    }
  }]);
  return ReactBanners;
}(Component);

var exportComponents = createSlotComponents(ReactBanners, BannerRelations);

exportComponents.Button = _class;

export default exportComponents;
//# sourceMappingURL=index.es.js.map
