{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kehongliu/Documents/Temp/455/find-my-tutor/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kehongliu/Documents/Temp/455/find-my-tutor/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/kehongliu/Documents/Temp/455/find-my-tutor/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable */import React,{useEffect,useState}from'react';import{api}from'../APIs/api';import{useParams}from\"react-router\";export default function useComments(){// State: comments\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),comments=_useState2[0],setComments=_useState2[1];// Get a post's all comments with its account info.\nvar getComments=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(postId){var res,output;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('https://find-my-tutor-ubc.herokuapp.com/comments/'+postId,{method:'GET'});case 2:res=_context.sent;_context.next=5;return res.json();case 5:output=_context.sent;if(!output.success){_context.next=11;break;}setComments(output.result);return _context.abrupt(\"return\",output.result);case 11:throw new Error(output.error);case 12:case\"end\":return _context.stop();}}},_callee);}));return function getComments(_x){return _ref.apply(this,arguments);};}();// Add a new comment.\nvar addComment=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newComment){var res,output;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch('https://find-my-tutor-ubc.herokuapp.com/comments',{method:'POST',headers:{'Content-type':'application/json'},body:JSON.stringify(newComment)});case 2:res=_context2.sent;_context2.next=5;return res.json();case 5:output=_context2.sent;if(!output.success){_context2.next=10;break;}return _context2.abrupt(\"return\",output.result);case 10:throw new Error(output.error);case 11:case\"end\":return _context2.stop();}}},_callee2);}));return function addComment(_x2){return _ref2.apply(this,arguments);};}();var deleteComment=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id){var req;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:console.log(\"delete post: \".concat(id));_context3.next=3;return api.delete('/comments',{params:{id:id}});case 3:req=_context3.sent;case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function deleteComment(_x3){return _ref3.apply(this,arguments);};}();var updateComment=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(comment){var newComments,req,res;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:console.log(\"update comment: \".concat(comment.id));console.log(comment);newComments=comments.splice(comments.findIndex(function(oldComment){console.log('finding idx');console.log(oldComment.id);console.log(comment.id);return oldComment.id===comment.id;}),1,comment);console.log(newComments);setComments(newComments);_context4.next=7;return api.put('/comments',JSON.stringify(comment));case 7:req=_context4.sent;_context4.next=10;return req.json();case 10:res=_context4.sent;case 11:case\"end\":return _context4.stop();}}},_callee4);}));return function updateComment(_x4){return _ref4.apply(this,arguments);};}();// Effect: fetch comments.\nvar _useParams=useParams(),postId=_useParams.postId;useEffect(function(){getComments(postId);},[]);return{comments:comments,getComments:getComments,addComment:addComment};}","map":{"version":3,"sources":["/Users/kehongliu/Documents/Temp/455/find-my-tutor/client/src/frontend/hooks/useComments.jsx"],"names":["React","useEffect","useState","api","useParams","useComments","comments","setComments","getComments","postId","fetch","method","res","json","output","success","result","Error","error","addComment","newComment","headers","body","JSON","stringify","deleteComment","id","console","log","delete","params","req","updateComment","comment","newComments","splice","findIndex","oldComment","put"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, {useEffect, useState} from 'react';\nimport { api } from '../APIs/api';\nimport {useParams} from \"react-router\";\n\nexport default function useComments() {\n  // State: comments\n  const [comments, setComments] = useState([]);\n\n  // Get a post's all comments with its account info.\n  const getComments = async (postId) => {\n    const res = await fetch('https://find-my-tutor-ubc.herokuapp.com/comments/' + postId, {\n      method: 'GET'\n    });\n    const output = await res.json();\n\n    if (output.success) {\n      setComments(output.result);\n      return output.result;\n    } else {\n      throw new Error(output.error);\n    }\n  };\n\n  // Add a new comment.\n  const addComment = async (newComment) => {\n    const res = await fetch('https://find-my-tutor-ubc.herokuapp.com/comments', {\n      method: 'POST',\n      headers: {'Content-type': 'application/json'},\n      body: JSON.stringify(newComment)\n    });\n    const output = await res.json();\n\n    if (output.success) {\n      return output.result;\n    } else {\n      throw new Error(output.error);\n    }\n  };\n\n  const deleteComment = async (id) => {\n    console.log(`delete post: ${id}`);\n    const req = await api.delete('/comments', {\n      params: { id },\n    });\n  };\n\n  const updateComment = async (comment) => {\n    console.log(`update comment: ${comment.id}`);\n    console.log(comment);\n    const newComments = comments.splice(\n      comments.findIndex((oldComment) => {\n        console.log('finding idx');\n        console.log(oldComment.id);\n        console.log(comment.id);\n        return oldComment.id === comment.id;\n      }),\n      1,\n      comment,\n    );\n    console.log(newComments);\n    setComments(\n      newComments,\n    );\n    const req = await api.put('/comments', JSON.stringify(comment));\n    const res = await req.json();\n  };\n\n  // Effect: fetch comments.\n  const { postId } = useParams();\n  useEffect(() => {\n    getComments(postId);\n  }, []);\n\n  return { comments, getComments, addComment };\n}\n"]},"metadata":{},"sourceType":"module"}