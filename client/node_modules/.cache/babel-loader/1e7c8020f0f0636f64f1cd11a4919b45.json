{"ast":null,"code":"/*! Case - v1.6.2 - 2020-03-24\n* Copyright (c) 2020 Nathan Bubna; Licensed MIT, GPL */\n(function () {\n  \"use strict\";\n\n  var unicodes = function unicodes(s, prefix) {\n    prefix = prefix || '';\n    return s.replace(/(^|-)/g, \"$1\\\\u\" + prefix).replace(/,/g, \"\\\\u\" + prefix);\n  },\n      basicSymbols = unicodes('20-26,28-2F,3A-40,5B-60,7B-7E,A0-BF,D7,F7', '00'),\n      baseLowerCase = 'a-z' + unicodes('DF-F6,F8-FF', '00'),\n      baseUpperCase = 'A-Z' + unicodes('C0-D6,D8-DE', '00'),\n      improperInTitle = 'A|An|And|As|At|But|By|En|For|If|In|Of|On|Or|The|To|Vs?\\\\.?|Via',\n      regexps = function regexps(symbols, lowers, uppers, impropers) {\n    symbols = symbols || basicSymbols;\n    lowers = lowers || baseLowerCase;\n    uppers = uppers || baseUpperCase;\n    impropers = impropers || improperInTitle;\n    return {\n      capitalize: new RegExp('(^|[' + symbols + '])([' + lowers + '])', 'g'),\n      pascal: new RegExp('(^|[' + symbols + '])+([' + lowers + uppers + '])', 'g'),\n      fill: new RegExp('[' + symbols + ']+(.|$)', 'g'),\n      sentence: new RegExp('(^\\\\s*|[\\\\?\\\\!\\\\.]+\"?\\\\s+\"?|,\\\\s+\")([' + lowers + '])', 'g'),\n      improper: new RegExp('\\\\b(' + impropers + ')\\\\b', 'g'),\n      relax: new RegExp('([^' + uppers + '])([' + uppers + ']*)([' + uppers + '])(?=[^' + uppers + ']|$)', 'g'),\n      upper: new RegExp('^[^' + lowers + ']+$'),\n      hole: /[^\\s]\\s[^\\s]/,\n      apostrophe: /'/g,\n      room: new RegExp('[' + symbols + ']')\n    };\n  },\n      re = regexps(),\n      _ = {\n    re: re,\n    unicodes: unicodes,\n    regexps: regexps,\n    types: [],\n    up: String.prototype.toUpperCase,\n    low: String.prototype.toLowerCase,\n    cap: function cap(s) {\n      return _.up.call(s.charAt(0)) + s.slice(1);\n    },\n    decap: function decap(s) {\n      return _.low.call(s.charAt(0)) + s.slice(1);\n    },\n    deapostrophe: function deapostrophe(s) {\n      return s.replace(re.apostrophe, '');\n    },\n    fill: function fill(s, _fill, deapostrophe) {\n      if (_fill != null) {\n        s = s.replace(re.fill, function (m, next) {\n          return next ? _fill + next : '';\n        });\n      }\n\n      if (deapostrophe) {\n        s = _.deapostrophe(s);\n      }\n\n      return s;\n    },\n    prep: function prep(s, fill, pascal, upper) {\n      s = s == null ? '' : s + ''; // force to string\n\n      if (!upper && re.upper.test(s)) {\n        s = _.low.call(s);\n      }\n\n      if (!fill && !re.hole.test(s)) {\n        var holey = _.fill(s, ' ');\n\n        if (re.hole.test(holey)) {\n          s = holey;\n        }\n      }\n\n      if (!pascal && !re.room.test(s)) {\n        s = s.replace(re.relax, _.relax);\n      }\n\n      return s;\n    },\n    relax: function relax(m, before, acronym, caps) {\n      return before + ' ' + (acronym ? acronym + ' ' : '') + caps;\n    }\n  },\n      Case = {\n    _: _,\n    of: function of(s) {\n      for (var i = 0, m = _.types.length; i < m; i++) {\n        if (Case[_.types[i]].apply(Case, arguments) === s) {\n          return _.types[i];\n        }\n      }\n    },\n    flip: function flip(s) {\n      return s.replace(/\\w/g, function (l) {\n        return (l == _.up.call(l) ? _.low : _.up).call(l);\n      });\n    },\n    random: function random(s) {\n      return s.replace(/\\w/g, function (l) {\n        return (Math.round(Math.random()) ? _.up : _.low).call(l);\n      });\n    },\n    type: function type(_type, fn) {\n      Case[_type] = fn;\n\n      _.types.push(_type);\n    }\n  },\n      types = {\n    lower: function lower(s, fill, deapostrophe) {\n      return _.fill(_.low.call(_.prep(s, fill)), fill, deapostrophe);\n    },\n    snake: function snake(s) {\n      return Case.lower(s, '_', true);\n    },\n    constant: function constant(s) {\n      return Case.upper(s, '_', true);\n    },\n    camel: function camel(s) {\n      return _.decap(Case.pascal(s));\n    },\n    kebab: function kebab(s) {\n      return Case.lower(s, '-', true);\n    },\n    upper: function upper(s, fill, deapostrophe) {\n      return _.fill(_.up.call(_.prep(s, fill, false, true)), fill, deapostrophe);\n    },\n    capital: function capital(s, fill, deapostrophe) {\n      return _.fill(_.prep(s).replace(re.capitalize, function (m, border, letter) {\n        return border + _.up.call(letter);\n      }), fill, deapostrophe);\n    },\n    header: function header(s) {\n      return Case.capital(s, '-', true);\n    },\n    pascal: function pascal(s) {\n      return _.fill(_.prep(s, false, true).replace(re.pascal, function (m, border, letter) {\n        return _.up.call(letter);\n      }), '', true);\n    },\n    title: function title(s) {\n      return Case.capital(s).replace(re.improper, function (small, p, i, s) {\n        return i > 0 && i < s.lastIndexOf(' ') ? _.low.call(small) : small;\n      });\n    },\n    sentence: function sentence(s, names, abbreviations) {\n      s = Case.lower(s).replace(re.sentence, function (m, prelude, letter) {\n        return prelude + _.up.call(letter);\n      });\n\n      if (names) {\n        names.forEach(function (name) {\n          s = s.replace(new RegExp('\\\\b' + Case.lower(name) + '\\\\b', \"g\"), _.cap);\n        });\n      }\n\n      if (abbreviations) {\n        abbreviations.forEach(function (abbr) {\n          s = s.replace(new RegExp('(\\\\b' + Case.lower(abbr) + '\\\\. +)(\\\\w)'), function (m, abbrAndSpace, letter) {\n            return abbrAndSpace + _.low.call(letter);\n          });\n        });\n      }\n\n      return s;\n    }\n  }; // TODO: Remove \"squish\" in a future breaking release.\n\n\n  types.squish = types.pascal; // Allow import default\n\n  Case.default = Case;\n\n  for (var type in types) {\n    Case.type(type, types[type]);\n  } // export Case (AMD, commonjs, or global)\n\n\n  var define = typeof define === \"function\" ? define : function () {};\n  define(typeof module === \"object\" && module.exports ? module.exports = Case : this.Case = Case);\n}).call(this);","map":{"version":3,"sources":["/Users/kehongliu/Documents/Temp/455/find-my-tutor/client/node_modules/case/dist/Case.js"],"names":["unicodes","s","prefix","replace","basicSymbols","baseLowerCase","baseUpperCase","improperInTitle","regexps","symbols","lowers","uppers","impropers","capitalize","RegExp","pascal","fill","sentence","improper","relax","upper","hole","apostrophe","room","re","_","types","up","String","prototype","toUpperCase","low","toLowerCase","cap","call","charAt","slice","decap","deapostrophe","m","next","prep","test","holey","before","acronym","caps","Case","of","i","length","apply","arguments","flip","l","random","Math","round","type","fn","push","lower","snake","constant","camel","kebab","capital","border","letter","header","title","small","p","lastIndexOf","names","abbreviations","prelude","forEach","name","abbr","abbrAndSpace","squish","default","define","module","exports"],"mappings":"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","sourcesContent":["/*! Case - v1.6.2 - 2020-03-24\n* Copyright (c) 2020 Nathan Bubna; Licensed MIT, GPL */\n(function() {\n    \"use strict\";\n    var unicodes = function(s, prefix) {\n        prefix = prefix || '';\n        return s.replace(/(^|-)/g, '$1\\\\u'+prefix).replace(/,/g, '\\\\u'+prefix);\n    },\n    basicSymbols = unicodes('20-26,28-2F,3A-40,5B-60,7B-7E,A0-BF,D7,F7', '00'),\n    baseLowerCase = 'a-z'+unicodes('DF-F6,F8-FF', '00'),\n    baseUpperCase = 'A-Z'+unicodes('C0-D6,D8-DE', '00'),\n    improperInTitle = 'A|An|And|As|At|But|By|En|For|If|In|Of|On|Or|The|To|Vs?\\\\.?|Via',\n    regexps = function(symbols, lowers, uppers, impropers) {\n        symbols = symbols || basicSymbols;\n        lowers = lowers || baseLowerCase;\n        uppers = uppers || baseUpperCase;\n        impropers = impropers || improperInTitle;\n        return {\n            capitalize: new RegExp('(^|['+symbols+'])(['+lowers+'])', 'g'),\n            pascal: new RegExp('(^|['+symbols+'])+(['+lowers+uppers+'])', 'g'),\n            fill: new RegExp('['+symbols+']+(.|$)','g'),\n            sentence: new RegExp('(^\\\\s*|[\\\\?\\\\!\\\\.]+\"?\\\\s+\"?|,\\\\s+\")(['+lowers+'])', 'g'),\n            improper: new RegExp('\\\\b('+impropers+')\\\\b', 'g'),\n            relax: new RegExp('([^'+uppers+'])(['+uppers+']*)(['+uppers+'])(?=[^'+uppers+']|$)', 'g'),\n            upper: new RegExp('^[^'+lowers+']+$'),\n            hole: /[^\\s]\\s[^\\s]/,\n            apostrophe: /'/g,\n            room: new RegExp('['+symbols+']')\n        };\n    },\n    re = regexps(),\n    _ = {\n        re: re,\n        unicodes: unicodes,\n        regexps: regexps,\n        types: [],\n        up: String.prototype.toUpperCase,\n        low: String.prototype.toLowerCase,\n        cap: function(s) {\n            return _.up.call(s.charAt(0))+s.slice(1);\n        },\n        decap: function(s) {\n            return _.low.call(s.charAt(0))+s.slice(1);\n        },\n        deapostrophe: function(s) {\n            return s.replace(re.apostrophe, '');\n        },\n        fill: function(s, fill, deapostrophe) {\n            if (fill != null) {\n                s = s.replace(re.fill, function(m, next) {\n                    return next ? fill + next : '';\n                });\n            }\n            if (deapostrophe) {\n                s = _.deapostrophe(s);\n            }\n            return s;\n        },\n        prep: function(s, fill, pascal, upper) {\n            s = s == null ? '' : s + '';// force to string\n            if (!upper && re.upper.test(s)) {\n                s = _.low.call(s);\n            }\n            if (!fill && !re.hole.test(s)) {\n                var holey = _.fill(s, ' ');\n                if (re.hole.test(holey)) {\n                    s = holey;\n                }\n            }\n            if (!pascal && !re.room.test(s)) {\n                s = s.replace(re.relax, _.relax);\n            }\n            return s;\n        },\n        relax: function(m, before, acronym, caps) {\n            return before + ' ' + (acronym ? acronym+' ' : '') + caps;\n        }\n    },\n    Case = {\n        _: _,\n        of: function(s) {\n            for (var i=0,m=_.types.length; i<m; i++) {\n                if (Case[_.types[i]].apply(Case, arguments) === s){ return _.types[i]; }\n            }\n        },\n        flip: function(s) {\n            return s.replace(/\\w/g, function(l) {\n                return (l == _.up.call(l) ? _.low : _.up).call(l);\n            });\n        },\n        random: function(s) {\n            return s.replace(/\\w/g, function(l) {\n                return (Math.round(Math.random()) ? _.up : _.low).call(l);\n            });\n        },\n        type: function(type, fn) {\n            Case[type] = fn;\n            _.types.push(type);\n        }\n    },\n    types = {\n        lower: function(s, fill, deapostrophe) {\n            return _.fill(_.low.call(_.prep(s, fill)), fill, deapostrophe);\n        },\n        snake: function(s) {\n            return Case.lower(s, '_', true);\n        },\n        constant: function(s) {\n            return Case.upper(s, '_', true);\n        },\n        camel: function(s) {\n            return _.decap(Case.pascal(s));\n        },\n        kebab: function(s) {\n            return Case.lower(s, '-', true);\n        },\n        upper: function(s, fill, deapostrophe) {\n            return _.fill(_.up.call(_.prep(s, fill, false, true)), fill, deapostrophe);\n        },\n        capital: function(s, fill, deapostrophe) {\n            return _.fill(_.prep(s).replace(re.capitalize, function(m, border, letter) {\n                return border+_.up.call(letter);\n            }), fill, deapostrophe);\n        },\n        header: function(s) {\n            return Case.capital(s, '-', true);\n        },\n        pascal: function(s) {\n            return _.fill(_.prep(s, false, true).replace(re.pascal, function(m, border, letter) {\n                return _.up.call(letter);\n            }), '', true);\n        },\n        title: function(s) {\n            return Case.capital(s).replace(re.improper, function(small, p, i, s) {\n                return i > 0 && i < s.lastIndexOf(' ') ? _.low.call(small) : small;\n            });\n        },\n        sentence: function(s, names, abbreviations) {\n            s = Case.lower(s).replace(re.sentence, function(m, prelude, letter) {\n                return prelude + _.up.call(letter);\n            });\n            if (names) {\n                names.forEach(function(name) {\n                    s = s.replace(new RegExp('\\\\b'+Case.lower(name)+'\\\\b', \"g\"), _.cap);\n                });\n            }\n            if (abbreviations) {\n                abbreviations.forEach(function(abbr) {\n                    s = s.replace(new RegExp('(\\\\b'+Case.lower(abbr)+'\\\\. +)(\\\\w)'), function(m, abbrAndSpace, letter) {\n                        return abbrAndSpace + _.low.call(letter);\n                    });\n                });\n            }\n            return s;\n        }\n    };\n\n    // TODO: Remove \"squish\" in a future breaking release.\n    types.squish = types.pascal;\n    \n    // Allow import default\n    Case.default = Case;\n\n    for (var type in types) {\n        Case.type(type, types[type]);\n    }\n    // export Case (AMD, commonjs, or global)\n    var define = typeof define === \"function\" ? define : function(){};\n    define(typeof module === \"object\" && module.exports ? module.exports = Case : this.Case = Case);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}