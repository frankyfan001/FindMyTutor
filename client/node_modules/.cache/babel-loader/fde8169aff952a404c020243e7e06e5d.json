{"ast":null,"code":"/**!\n * Spectra.js\n *\n * Wrapping a value with Spectra() returns a Spectra object.\n *\n * The object's color value is as follows:\n * {\n *   r: 0 to 255 [int], // Red\n *   g: 0 to 255 [int], // Green\n *   b: 0 to 255 [int], // Blue\n *   a: 0 to 1 [float] // Alpha\n * }\n */\n(function () {\n  'use strict'; // Keep track of the global object.\n\n  var root = this; // Store the old value of Spectra to reassign in case of a call to noConflict.\n\n  var oldSpectra = root.Spectra; // Utility functions for use in Spectra.\n\n  var Util = {}; // All official predefined css colors.\n\n  var predefinedColors = {\n    \"white\": \"#ffffff\",\n    \"silver\": \"#c0c0c0\",\n    \"gray\": \"#808080\",\n    \"black\": \"#000000\",\n    \"red\": \"#ff0000\",\n    \"maroon\": \"#800000\",\n    \"yellow\": \"#ffff00\",\n    \"olive\": \"#808000\",\n    \"lime\": \"#00ff00\",\n    \"green\": \"#008000\",\n    \"aqua\": \"#00ffff\",\n    \"teal\": \"#008080\",\n    \"blue\": \"#0000ff\",\n    \"navy\": \"#000080\",\n    \"fuschia\": \"#ff00ff\",\n    \"purple\": \"#800080\",\n    \"orange\": \"#ffa500\"\n  };\n  /**\n   * Clamps x to be between lower and upper, inclusive.\n   * If not specified, lower and upper are 0 and 1 respectively.\n   * If x is outside the range lower to upper, the closest of lower or upper is used.\n   */\n\n  Util.clamp = function (x, lower, upper) {\n    x = x || 0;\n    lower = lower !== undefined ? lower : 0;\n    upper = upper !== undefined ? upper : 1;\n    return Math.max(lower, Math.min(upper, x));\n  };\n  /**\n   * Converts from RGB to HSV.\n   * RGB should have keys r, g, b.\n   * HSV will have keys h, s, v.\n   */\n\n\n  Util.rgbToHsv = function (rgb) {\n    var hsv = {};\n    var r = Number(rgb.r || 0) / 255;\n    var g = Number(rgb.g || 0) / 255;\n    var b = Number(rgb.b || 0) / 255;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var delta = max - min;\n    hsv.v = max;\n\n    if (hsv.v === 0) {\n      hsv.h = 0;\n      hsv.s = 0;\n    } else {\n      hsv.s = (max - min) / max;\n\n      if (hsv.s === 0) {\n        hsv.h = 0;\n      } else {\n        if (max === r) {\n          hsv.h = (g - b) / delta;\n        } else if (max === g) {\n          hsv.h = 2 + (b - r) / delta;\n        } else {\n          hsv.h = 4 + (r - g) / delta;\n        }\n\n        hsv.h *= 60;\n\n        if (hsv.h < 0) {\n          hsv.h += 360;\n        }\n      }\n    }\n\n    return hsv;\n  };\n  /**\n   * Converts from HSV to RGB.\n   * HSV should have keys h, s, v.\n   * RGB will have keys r, g, b.\n   */\n\n\n  Util.hsvToRgb = function (hsv) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var h = Util.clamp(hsv.h || hsv.hue, 0, 360);\n    var s = Util.clamp(hsv.s || hsv.saturation, 0, 1);\n    var v = Util.clamp(hsv.v || hsv.value);\n    var chroma = s * v;\n    var sector = h / 60; // Sector of the color wheel.\n\n    var x = chroma * (1 - Math.abs(sector % 2 - 1));\n\n    if (sector < 1) {\n      rgb.r = chroma;\n      rgb.g = x;\n    } else if (sector < 2) {\n      rgb.r = x;\n      rgb.g = chroma;\n    } else if (sector < 3) {\n      rgb.g = chroma;\n      rgb.b = x;\n    } else if (sector < 4) {\n      rgb.g = x;\n      rgb.b = chroma;\n    } else if (sector < 5) {\n      rgb.r = x;\n      rgb.b = chroma;\n    } else {\n      rgb.r = chroma;\n      rgb.b = x;\n    }\n\n    var min = v - chroma;\n    rgb.r += min;\n    rgb.g += min;\n    rgb.b += min;\n    rgb.r *= 255;\n    rgb.g *= 255;\n    rgb.b *= 255;\n    return rgb;\n  };\n  /**\n   * Converts from RGB to HSL.\n   * RGB should have keys r, g, b.\n   * HSL will have keys h, s, l.\n   */\n\n\n  Util.rgbToHsl = function (rgb) {\n    var hsv = Util.rgbToHsv(rgb);\n    var hsl = {};\n    hsl.h = hsv.h;\n    hsl.l = (2 - hsv.s) * hsv.v;\n    hsl.s = hsv.s * hsv.v;\n    hsl.s /= hsl.l <= 1 ? hsl.l : 2 - hsl.l;\n    hsl.l /= 2;\n\n    if (isNaN(hsl.s)) {\n      hsl.s = 0;\n    }\n\n    return hsl;\n  };\n  /**\n   * Converts from HSL to RGB.\n   * HSL should have keys h, s, l.\n   * RGB will have keys r, g, b.\n   */\n\n\n  Util.hslToRgb = function (hsl) {\n    var h = Util.clamp(hsl.h || hsl.hue, 0, 360);\n    var s = Util.clamp(hsl.s || hsl.saturation);\n    var l = Util.clamp(hsl.l || hsl.lightness);\n    var hsv = {};\n    hsv.h = h;\n    s *= l < 0.5 ? l : 1 - l;\n    hsv.s = 2 * s / (l + s);\n    hsv.v = l + s;\n    return Util.hsvToRgb(hsv);\n  };\n  /**\n   * Turns an rgb color into a LAB color.\n   */\n\n\n  Util.rgbToLab = function (rgb) {\n    // RGB to XYZ\n    rgb = {\n      r: rgb.r / 255,\n      g: rgb.g / 255,\n      b: rgb.b / 255\n    };\n    var xyz, tc;\n\n    for (tc in rgb) {\n      if (rgb[tc] > 0.04045) {\n        rgb[tc] = Math.pow((rgb[tc] + 0.055) / 1.055, 2.4);\n      } else {\n        rgb[tc] /= 12.92;\n      }\n\n      rgb[tc] = rgb[tc] * 100;\n    }\n\n    xyz = {\n      x: rgb.r * 0.4124 + rgb.g * 0.3576 + rgb.b * 0.1805,\n      y: rgb.r * 0.2126 + rgb.g * 0.7152 + rgb.b * 0.0722,\n      z: rgb.r * 0.0193 + rgb.g * 0.1192 + rgb.b * 0.9505\n    }; // XYZ to LAB\n\n    var xyz2 = {};\n    var white = {\n      x: 95.047,\n      y: 100.000,\n      z: 108.883\n    };\n\n    for (tc in xyz) {\n      xyz2[tc] = xyz[tc] / white[tc];\n\n      if (xyz2[tc] > 0.008856) {\n        xyz2[tc] = Math.pow(xyz2[tc], 1 / 3);\n      } else {\n        xyz2[tc] = 7.787 * xyz2[tc] + 16 / 116;\n      }\n    }\n\n    return {\n      l: 116 * xyz2.y - 16,\n      a: 500 * (xyz2.x - xyz2.y),\n      b: 200 * (xyz2.y - xyz2.z)\n    };\n  };\n  /**\n   * Converts an lab color to rgb.\n   */\n\n\n  Util.labToRgb = function (lab) {\n    var xyz = {};\n    var rgb = {}; // LAB to XYZ\n\n    xyz.y = ((lab.l || lab.L) + 16) / 116;\n    xyz.x = lab.a / 500 + xyz.y;\n    xyz.z = xyz.y - lab.b / 200;\n\n    if (Math.pow(xyz.y, 3) > 0.008856) {\n      xyz.y = Math.pow(xyz.y, 3);\n    } else {\n      xyz.y = (xyz.y - 16 / 116) / 7.787;\n    }\n\n    if (Math.pow(xyz.x, 3) > 0.008856) {\n      xyz.x = Math.pow(xyz.x, 3);\n    } else {\n      xyz.x = (xyz.x - 16 / 116) / 7.787;\n    }\n\n    if (Math.pow(xyz.z, 3) > 0.008856) {\n      xyz.z = Math.pow(xyz.z, 3);\n    } else {\n      xyz.z = (xyz.z - 16 / 116) / 7.787;\n    } //  Observer= 2degree, Illuminant= D65\n\n\n    xyz.x *= 95.047 / 100;\n    xyz.y *= 100.000 / 100;\n    xyz.z *= 108.883 / 100; //  XYZ to RGB\n\n    rgb.r = xyz.x * 3.2406 + xyz.y * -1.5372 + xyz.z * -0.4986;\n    rgb.g = xyz.x * -0.9689 + xyz.y * 1.8758 + xyz.z * 0.0415;\n    rgb.b = xyz.x * 0.0557 + xyz.y * -0.2040 + xyz.z * 1.0570;\n\n    if (rgb.r > 0.0031308) {\n      rgb.r = 1.055 * Math.pow(rgb.r, 1 / 2.4) - 0.055;\n    } else {\n      rgb.r *= 12.92;\n    }\n\n    if (rgb.g > 0.0031308) {\n      rgb.g = 1.055 * Math.pow(rgb.g, 1 / 2.4) - 0.055;\n    } else {\n      rgb.g *= 12.92;\n    }\n\n    if (rgb.b > 0.0031308) {\n      rgb.b = 1.055 * Math.pow(rgb.b, 1 / 2.4) - 0.055;\n    } else {\n      rgb.b *= 12.92;\n    }\n\n    rgb.r = Util.clamp(rgb.r * 255, 0, 255);\n    rgb.g = Util.clamp(rgb.g * 255, 0, 255);\n    rgb.b = Util.clamp(rgb.b * 255, 0, 255);\n    return rgb;\n  };\n  /**\n   * Converts from CSS to RGB.\n   */\n\n\n  Util.parseCss = function (css) {\n    var color = {};\n    var shorthandRegex = /^#[0-9a-f]{3}$/i;\n    var shorthandMatch = css.match(shorthandRegex);\n\n    if (shorthandMatch) {\n      color = {\n        r: parseInt(css.charAt(1), 16) * 0x11,\n        g: parseInt(css.charAt(2), 16) * 0x11,\n        b: parseInt(css.charAt(3), 16) * 0x11\n      };\n      return Util.normalize(color);\n    }\n\n    var longhandRegex = /^#[0-9a-f]{6}$/i;\n    var longhandMatch = css.match(longhandRegex);\n\n    if (longhandMatch) {\n      color = {\n        r: parseInt(css.slice(1, 3), 16),\n        g: parseInt(css.slice(3, 5), 16),\n        b: parseInt(css.slice(5, 7), 16)\n      };\n      return Util.normalize(color);\n    }\n\n    var rgbRegex = /^rgb\\(\\s*([0-9]+),\\s*([0-9]+),\\s*([0-9]+)\\s*\\)$/i;\n    var rgbMatch = css.match(rgbRegex);\n\n    if (rgbMatch) {\n      color = {\n        r: parseInt(rgbMatch[1], 10),\n        g: parseInt(rgbMatch[2], 10),\n        b: parseInt(rgbMatch[3], 10)\n      };\n      return Util.normalize(color);\n    }\n\n    var rgbaRegex = /^rgba\\(\\s*([0-9]+),\\s*([0-9]+),\\s*([0-9]+),\\s*([0-9\\.]+)\\s*\\)$/i;\n    var rgbaMatch = css.match(rgbaRegex);\n\n    if (rgbaMatch) {\n      color = {\n        r: parseInt(rgbaMatch[1], 10),\n        g: parseInt(rgbaMatch[2], 10),\n        b: parseInt(rgbaMatch[3], 10),\n        a: parseFloat(rgbaMatch[4])\n      };\n      return Util.normalize(color);\n    } // If we can't parse it, we throw a TypeError.\n\n\n    throw new TypeError(css + ' is not a valid CSS string for Spectra.');\n  };\n  /**\n   * Converts a predefined color string to a Spectra object\n   * Eg Util.parsePredefinedColor('white') === Spectra('#ffffff') === Spectra('{r: 255, g: 255, b: 255}');\n   */\n\n\n  Util.parsePredefinedColor = function (string) {\n    return new Spectra.fn(predefinedColors[string]);\n  };\n  /**\n   * Performs any conversions necessary to turn the arg into a Spectra object.\n   */\n\n\n  Util.normalize = function (arg) {\n    arg.a = arg.a || 1;\n    var color = arg; // Perform conversions if necessary.\n\n    if (color.hsv !== undefined) {\n      color = Util.hsvToRgb(color.hsv);\n      color.a = arg.a;\n    } else if (color.hsl !== undefined) {\n      color = Util.hslToRgb(color.hsl);\n      color.a = arg.a;\n    } else if (color.css !== undefined) {\n      color = Util.parseCss(color.css);\n    } else if (color.lab !== undefined) {\n      color = Util.labToRgb(color.lab);\n      color.a = arg.a;\n    } // Convert any full words into the abbreviated versions.\n\n\n    color.r = color.red || color.r;\n    color.g = color.green || color.g;\n    color.b = color.blue || color.b;\n    color.a = color.alpha || color.a; // Place all values in a valid range.\n\n    color.r = Util.clamp(color.r, 0, 255);\n    color.g = Util.clamp(color.g, 0, 255);\n    color.b = Util.clamp(color.b, 0, 255);\n    color.a = Util.clamp(color.a, 0, 1);\n    return color;\n  };\n  /**\n   * Constructor for Spectra object.\n   * @constructor\n   */\n\n\n  var Spectra = function Spectra(arg) {\n    return new Spectra.fn(arg);\n  };\n\n  Spectra.fn = function (arg) {\n    if (arg === null || arg === undefined) {\n      throw new TypeError('Spectra argument must be defined.');\n    }\n\n    if (arg instanceof Spectra.fn) {\n      return arg;\n    }\n\n    if (typeof arg === 'object') {\n      if (arg.r !== undefined || arg.red !== undefined) {\n        this.color = Util.normalize({\n          r: arg.r,\n          g: arg.g,\n          b: arg.b,\n          a: arg.a\n        });\n      } else if (arg.v !== undefined || arg.value !== undefined) {\n        this.color = Util.normalize({\n          hsv: arg,\n          a: arg.a\n        });\n      } else if ((arg.l !== undefined || arg.lightness !== undefined) && (arg.s !== undefined || arg.saturation !== undefined)) {\n        this.color = Util.normalize({\n          hsl: arg,\n          a: arg.a || arg.alpha\n        });\n      } else if ((arg.l !== undefined || arg.L !== undefined) && arg.a !== undefined) {\n        this.color = Util.normalize({\n          lab: arg,\n          a: arg.a || arg.alpha\n        });\n      } else {\n        throw new TypeError('Spectra argument ' + arg + ' is invalid.');\n      }\n    } else if (typeof arg === 'string') {\n      if (arg.toLowerCase() in predefinedColors) {\n        return Util.parsePredefinedColor(arg);\n      }\n\n      this.color = Util.normalize({\n        css: arg\n      });\n    } else {\n      throw new TypeError('Spectra argument ' + arg + ' is invalid.');\n    }\n\n    return this;\n  };\n  /**\n   * Get and set.\n   * These functions take an optional argument.\n   * If it is specified, the property is changed and the object is returned.\n   * Otherwise, the property value is returned.\n   */\n\n\n  Spectra.fn.prototype.red = function (arg) {\n    var color = this.color;\n\n    if (arguments.length) {\n      color.r = arg;\n      this.color = Util.normalize(color);\n      return this;\n    } else {\n      return Math.round(color.r);\n    }\n  };\n\n  Spectra.fn.prototype.green = function (arg) {\n    var color = this.color;\n\n    if (arguments.length) {\n      color.g = arg;\n      this.color = Util.normalize(color);\n      return this;\n    } else {\n      return Math.round(color.g);\n    }\n  };\n\n  Spectra.fn.prototype.blue = function (arg) {\n    var color = this.color;\n\n    if (arguments.length) {\n      color.b = arg;\n      this.color = Util.normalize(color);\n      return this;\n    } else {\n      return Math.round(color.b);\n    }\n  };\n\n  Spectra.fn.prototype.hue = function (arg) {\n    var color = Util.rgbToHsv(this.color);\n\n    if (arguments.length) {\n      color.h = arg;\n      this.color = Util.normalize({\n        hsv: color,\n        a: this.color.a\n      });\n      return this;\n    } else {\n      return Math.round(color.h);\n    }\n  };\n\n  Spectra.fn.prototype.saturationv = function (arg) {\n    var color = Util.rgbToHsv(this.color);\n\n    if (arguments.length) {\n      color.s = arg;\n      this.color = Util.normalize({\n        hsv: color,\n        a: this.color.a\n      });\n      return this;\n    } else {\n      return color.s;\n    }\n  };\n\n  Spectra.fn.prototype.value = function (arg) {\n    var color = Util.rgbToHsv(this.color);\n\n    if (arguments.length) {\n      color.v = arg;\n      this.color = Util.normalize({\n        hsv: color,\n        a: this.color.a\n      });\n      return this;\n    } else {\n      return color.v;\n    }\n  };\n\n  Spectra.fn.prototype.saturation = function (arg) {\n    var color = Util.rgbToHsl(this.color);\n\n    if (arguments.length) {\n      color.s = arg;\n      this.color = Util.normalize({\n        hsl: color,\n        a: this.color.a\n      });\n      return this;\n    } else {\n      return color.s;\n    }\n  };\n\n  Spectra.fn.prototype.lightness = function (arg) {\n    var color = Util.rgbToHsl(this.color);\n\n    if (arguments.length) {\n      color.l = arg;\n      this.color = Util.normalize({\n        hsl: color,\n        a: this.color.a\n      });\n      return this;\n    } else {\n      return color.l;\n    }\n  };\n\n  Spectra.fn.prototype.alpha = function (arg) {\n    var color = this.color;\n\n    if (arguments.length) {\n      color.a = arg;\n      return this;\n    } else {\n      return color.a;\n    }\n  };\n\n  Spectra.fn.prototype.hex = function () {\n    // Pad the strings so that they are all 2 digits long, and concatenate.\n    var rString = ('0' + this.red().toString(16)).slice(-2);\n    var gString = ('0' + this.green().toString(16)).slice(-2);\n    var bString = ('0' + this.blue().toString(16)).slice(-2);\n    return '#' + rString + gString + bString;\n  };\n\n  Spectra.fn.prototype.rgbaString = function () {\n    return 'rgba(' + this.red() + ',' + this.green() + ',' + this.blue() + ',' + this.alpha() + ')';\n  };\n\n  Spectra.fn.prototype.hslString = function () {\n    return 'hsl(' + this.hue() + ',' + this.saturation() + ',' + Math.round(this.lightness() * 100) / 100 + ')';\n  };\n\n  Spectra.fn.prototype.hslaString = function () {\n    return 'hsla(' + this.hue() + ',' + this.saturation() + ',' + Math.round(this.lightness() * 100) / 100 + ',' + this.alpha() + ')';\n  };\n\n  Spectra.fn.prototype.rgbNumber = function () {\n    return this.red() << 16 | this.green() << 8 | this.blue();\n  };\n\n  Spectra.fn.prototype.labObject = function () {\n    return Util.rgbToLab(this.color);\n  };\n  /**\n   * Use hex string function for toString() operations\n   * to allow direct assignment to CSS properties\n   */\n\n\n  Spectra.fn.prototype.toString = Spectra.fn.prototype.hex;\n  /**\n   * API Functions\n   * =============\n   *\n   * Below are any API functions that do not modify the current color, but return values based\n   * on the current color. As such, use red(), green(), etc. instead of actually accessing this.color.\n   */\n\n  /**\n   * Tests to see if this color is equal to other.\n   * Because other is also a color, it follows that we can simply compare red, green, blue, and alpha\n   * to see if the colors are equal.\n   */\n\n  Spectra.fn.prototype.equals = function (other) {\n    var color1 = this;\n    var color2 = other;\n\n    if (arguments.length < 1) {\n      return color1 === color2;\n    }\n\n    return color1.near(color2, 0);\n  };\n  /**\n   * Tests to see if an other color is within a percentage range of this color.\n   */\n\n\n  Spectra.fn.prototype.near = function (other, percentage) {\n    var color1 = this;\n    var color2 = other;\n    percentage = Math.abs(percentage || 0);\n    var adjustment = 255 * (percentage / 100);\n    return Math.abs(color2.red() - color1.red()) <= adjustment && Math.abs(color2.green() - color1.green()) <= adjustment && Math.abs(color2.blue() - color1.blue()) <= adjustment && Math.abs(color2.alpha() - color1.alpha()) <= percentage / 100;\n  };\n  /**\n   * Returns the complement of this color.\n   */\n\n\n  Spectra.fn.prototype.complement = function () {\n    var newColor = new Spectra(this.color);\n    newColor.hue((newColor.hue() + 180) % 360);\n    return newColor;\n  };\n  /**\n   * Negates this color.\n   * For a color {R, G, B}, returns a new color {R', G', B'}, where R' = 255 - R and so on.\n   */\n\n\n  Spectra.fn.prototype.negate = function () {\n    var newColor = new Spectra(this.color);\n    newColor.red(255 - newColor.red());\n    newColor.green(255 - newColor.green());\n    newColor.blue(255 - newColor.blue());\n    return newColor;\n  };\n  /**\n   * Lightens a color based on percentage value from 1 to 100.\n   */\n\n\n  Spectra.fn.prototype.lighten = function (percentage) {\n    var newColor = new Spectra(this.color);\n    var l = Util.clamp(newColor.lightness() + percentage / 100, 0, 1);\n    newColor.lightness(l);\n    return newColor;\n  };\n  /**\n   * Darkens a color based on percentage value from 1 to 100.\n   */\n\n\n  Spectra.fn.prototype.darken = function (percentage) {\n    return this.lighten(-percentage);\n  };\n  /**\n   * Lightens or darkens a color based on a random value in the specified range.\n   * Percentage should be passed in as an integer, so 40 would lighten or darken up to 40%.\n   */\n\n\n  Spectra.fn.prototype.randomColorRange = function (percentage) {\n    var adjustment = (Math.random() * 2 - 1) * percentage;\n    var newColor = new Spectra(this.color);\n    newColor = newColor.lighten(adjustment);\n    return newColor;\n  };\n  /**\n   * Adds saturation to the color based on a percentage value.\n   */\n\n\n  Spectra.fn.prototype.saturate = function (percentage) {\n    var p = percentage / 100;\n    var newColor = new Spectra(this.color);\n    newColor.saturation(newColor.saturation() + p);\n    return newColor;\n  };\n  /**\n   * Desaturates the color based on a percentage value.\n   */\n\n\n  Spectra.fn.prototype.desaturate = function (percentage) {\n    var p = percentage / 100;\n    var newColor = new Spectra(this.color);\n    newColor.saturation(newColor.saturation() - p);\n    return newColor;\n  };\n  /**\n   * Fades in the current color based on a percentage value, making it less transparent.\n   */\n\n\n  Spectra.fn.prototype.fadeIn = function (percentage) {\n    var p = percentage / 100;\n    var newColor = new Spectra(this.color);\n    newColor.alpha(newColor.alpha() + p);\n    return newColor;\n  };\n  /**\n   * Fades out the current color based on a percentage value, making it less transparent.\n   */\n\n\n  Spectra.fn.prototype.fadeOut = function (percentage) {\n    var p = percentage / 100;\n    var newColor = new Spectra(this.color);\n    newColor.alpha(newColor.alpha() - p);\n    return newColor;\n  };\n  /**\n   * Calculates the luma of the color, i.e. how it appears on screen.\n   */\n\n\n  Spectra.fn.prototype.luma = function () {\n    return 0.2126 * this.red() + 0.7152 * this.green() + 0.0722 * this.blue();\n  };\n  /**\n   * Returns a Spectra object, which is the grayscale of the current color.\n   */\n\n\n  Spectra.fn.prototype.grayscale = function () {\n    return this.desaturate(100);\n  };\n  /**\n   * If a color is dark then it's best to have white text on it.\n   * http://24ways.org/2010/calculating-color-contrast\n   */\n\n\n  Spectra.fn.prototype.isDark = function () {\n    var yiq = (this.red() * 299 + this.green() * 587 + this.blue() * 144) / 1000;\n    return yiq < 131.5;\n  };\n  /**\n   * If a color is light then it's best to have black text on it.\n   */\n\n\n  Spectra.fn.prototype.isLight = function () {\n    return !this.isDark();\n  };\n  /**\n   * Returns the color that results from mixing percent of the other color into this color.\n   */\n\n\n  Spectra.fn.prototype.mix = function (other, percentage) {\n    other = new Spectra(other);\n    var p = arguments.length < 2 ? 0.5 : percentage / 100;\n    return new Spectra({\n      r: this.red() * (1 - p) + other.red() * p,\n      g: this.green() * (1 - p) + other.green() * p,\n      b: this.blue() * (1 - p) + other.blue() * p,\n      a: this.alpha() * (1 - p) + other.alpha() * p\n    });\n  };\n  /**\n   * Returns a number from 0 to 1 representing the color contrast between the two colors.\n   */\n\n\n  Spectra.fn.prototype.contrast = function (other) {\n    other = new Spectra(other);\n    var diff = Math.max(this.red(), other.red()) - Math.min(this.red(), other.red()) + Math.max(this.green(), other.green()) - Math.min(this.green(), other.green()) + Math.max(this.blue(), other.blue()) - Math.min(this.blue(), other.blue());\n    return diff / 765;\n  };\n  /**\n   * Returns a gradient of colors approximately from this color to the other, consisting of n colors.\n   */\n\n\n  Spectra.fn.prototype.gradient = function (other, n) {\n    other = new Spectra(other);\n    var gradient = [];\n    var r = this.red();\n    var g = this.green();\n    var b = this.blue();\n    var dr = (other.red() - this.red()) / (n - 1);\n    var dg = (other.green() - this.green()) / (n - 1);\n    var db = (other.blue() - this.blue()) / (n - 1);\n\n    for (var i = 0; i < n; i++) {\n      gradient.push(new Spectra({\n        r: r,\n        g: g,\n        b: b\n      }));\n      r += dr;\n      g += dg;\n      b += db;\n    }\n\n    return gradient;\n  };\n  /**\n   * Harmony\n   *\n   * @desc Returns an array of harmonious colors (goo.gl/R3FRlU).\n   * @author Benjamin Fleming (benjamminf)\n   * @since 2014-01-06\n   * @param type (string) - Type of harmony.\n   * @param index (int) - At which point the original color exists on the set harmonies. Since\n   *   some types of color harmonies have inconsistent offsets (eg. rectangle) it's useful to\n   *   note where this original color lies on the set harmony hues.\n   * @return Array of Spectra instances.\n   */\n\n\n  Spectra.fn.prototype.harmony = function (type, index) {\n    index = typeof index === 'number' ? Math.abs(parseInt(index, 10)) : 0;\n    var colors = [];\n    var hsv = Util.rgbToHsv(this.color);\n    var hues = [0, 180];\n\n    switch (type) {\n      case 'analogous':\n        hues = [0, 30, 60];\n        break;\n\n      case 'triad':\n        hues = [0, 120, 240];\n        break;\n\n      case 'split-complementary':\n        hues = [0, 150, 210];\n        break;\n\n      case 'rectangle':\n        hues = [0, 60, 180, 240];\n        break;\n\n      case 'square':\n        hues = [0, 90, 180, 270];\n        break;\n\n      case 'complementary':\n        hues = [0, 180];\n        break;\n    }\n\n    var n = hues.length;\n    var offset = hues[index % n];\n\n    for (var i = 0; i < n; i++) {\n      colors.push(new Spectra({\n        h: (hsv.h + hues[i] - offset) % 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this.color.a\n      }));\n    }\n\n    return colors;\n  };\n  /**\n   * Restores the old value of Spectra and returns the wrapper function.\n   */\n\n\n  Spectra.noConflict = function () {\n    root.Spectra = oldSpectra;\n    return Spectra;\n  };\n  /**\n   * Generates a random color.\n   */\n\n\n  Spectra.random = function () {\n    return new Spectra({\n      r: Math.floor(Math.random() * 255),\n      g: Math.floor(Math.random() * 255),\n      b: Math.floor(Math.random() * 255)\n    });\n  }; // Set the global variable Spectra to the wrapper that we have defined.\n\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined') {\n      exports = module.exports = Spectra;\n    }\n\n    exports.Spectra = Spectra;\n  } else {\n    root.Spectra = Spectra;\n  }\n}).call(this);","map":{"version":3,"sources":["/Users/kehongliu/Documents/Temp/455/find-my-tutor/client/node_modules/spectra/spectra.js"],"names":["root","oldSpectra","Spectra","Util","predefinedColors","clamp","x","lower","upper","undefined","Math","max","min","rgbToHsv","rgb","hsv","r","Number","g","b","delta","v","h","s","hsvToRgb","hue","saturation","value","chroma","sector","abs","rgbToHsl","hsl","l","isNaN","hslToRgb","lightness","rgbToLab","xyz","tc","pow","y","z","xyz2","white","a","labToRgb","lab","L","parseCss","css","color","shorthandRegex","shorthandMatch","match","parseInt","charAt","normalize","longhandRegex","longhandMatch","slice","rgbRegex","rgbMatch","rgbaRegex","rgbaMatch","parseFloat","TypeError","parsePredefinedColor","string","fn","arg","red","green","blue","alpha","toLowerCase","prototype","arguments","length","round","saturationv","hex","rString","toString","gString","bString","rgbaString","hslString","hslaString","rgbNumber","labObject","equals","other","color1","color2","near","percentage","adjustment","complement","newColor","negate","lighten","darken","randomColorRange","random","saturate","p","desaturate","fadeIn","fadeOut","luma","grayscale","isDark","yiq","isLight","mix","contrast","diff","gradient","n","dr","dg","db","i","push","harmony","type","index","colors","hues","offset","noConflict","floor","exports","module","call"],"mappings":"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","sourcesContent":["/**!\n * Spectra.js\n *\n * Wrapping a value with Spectra() returns a Spectra object.\n *\n * The object's color value is as follows:\n * {\n *   r: 0 to 255 [int], // Red\n *   g: 0 to 255 [int], // Green\n *   b: 0 to 255 [int], // Blue\n *   a: 0 to 1 [float] // Alpha\n * }\n */\n\n(function() {\n  'use strict';\n\n  // Keep track of the global object.\n  var root = this;\n\n  // Store the old value of Spectra to reassign in case of a call to noConflict.\n  var oldSpectra = root.Spectra;\n\n  // Utility functions for use in Spectra.\n  var Util = {};\n\n  // All official predefined css colors.\n  var predefinedColors = {\n    \"white\": \"#ffffff\",\n    \"silver\": \"#c0c0c0\",\n    \"gray\": \"#808080\",\n    \"black\": \"#000000\",\n    \"red\": \"#ff0000\",\n    \"maroon\": \"#800000\",\n    \"yellow\": \"#ffff00\",\n    \"olive\": \"#808000\",\n    \"lime\": \"#00ff00\",\n    \"green\": \"#008000\",\n    \"aqua\": \"#00ffff\",\n    \"teal\": \"#008080\",\n    \"blue\": \"#0000ff\",\n    \"navy\": \"#000080\",\n    \"fuschia\": \"#ff00ff\",\n    \"purple\": \"#800080\",\n    \"orange\": \"#ffa500\"\n  };\n\n  /**\n   * Clamps x to be between lower and upper, inclusive.\n   * If not specified, lower and upper are 0 and 1 respectively.\n   * If x is outside the range lower to upper, the closest of lower or upper is used.\n   */\n  Util.clamp = function(x, lower, upper) {\n    x = x || 0;\n    lower = lower !== undefined ? lower : 0;\n    upper = upper !== undefined ? upper : 1;\n    return Math.max(lower, Math.min(upper, x));\n  };\n\n  /**\n   * Converts from RGB to HSV.\n   * RGB should have keys r, g, b.\n   * HSV will have keys h, s, v.\n   */\n  Util.rgbToHsv = function(rgb) {\n    var hsv = {};\n    var r = Number(rgb.r || 0) / 255;\n    var g = Number(rgb.g || 0) / 255;\n    var b = Number(rgb.b || 0) / 255;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var delta = max - min;\n\n    hsv.v = max;\n    if (hsv.v === 0) {\n      hsv.h = 0;\n      hsv.s = 0;\n    } else {\n      hsv.s = (max - min) / max;\n      if (hsv.s === 0) {\n        hsv.h = 0;\n      } else {\n        if (max === r) {\n          hsv.h = (g - b) / delta;\n        } else if (max === g) {\n          hsv.h = 2 + (b - r) / delta;\n        } else {\n          hsv.h = 4 + (r - g) / delta;\n        }\n        hsv.h *= 60;\n        if (hsv.h < 0) {\n          hsv.h += 360;\n        }\n      }\n    }\n\n    return hsv;\n  };\n\n  /**\n   * Converts from HSV to RGB.\n   * HSV should have keys h, s, v.\n   * RGB will have keys r, g, b.\n   */\n  Util.hsvToRgb = function(hsv) {\n    var rgb = {r: 0, g: 0, b: 0};\n\n    var h = Util.clamp((hsv.h || hsv.hue), 0, 360);\n    var s = Util.clamp((hsv.s || hsv.saturation), 0, 1);\n    var v = Util.clamp(hsv.v || hsv.value);\n    var chroma = s * v;\n    var sector = h / 60; // Sector of the color wheel.\n    var x = chroma * (1 - Math.abs((sector % 2) - 1));\n\n    if(sector < 1) {\n      rgb.r = chroma;\n      rgb.g = x;\n    } else if (sector < 2) {\n      rgb.r = x;\n      rgb.g = chroma;\n    } else if (sector < 3) {\n      rgb.g = chroma;\n      rgb.b = x;\n    } else if (sector < 4) {\n      rgb.g= x;\n      rgb.b = chroma;\n    } else if (sector < 5) {\n      rgb.r = x;\n      rgb.b = chroma;\n    } else {\n      rgb.r = chroma;\n      rgb.b = x;\n    }\n\n    var min = v - chroma;\n\n    rgb.r += min;\n    rgb.g += min;\n    rgb.b += min;\n\n    rgb.r *= 255;\n    rgb.g *= 255;\n    rgb.b *= 255;\n\n    return rgb;\n  };\n\n  /**\n   * Converts from RGB to HSL.\n   * RGB should have keys r, g, b.\n   * HSL will have keys h, s, l.\n   */\n  Util.rgbToHsl = function(rgb) {\n    var hsv = Util.rgbToHsv(rgb);\n    var hsl = {};\n    hsl.h = hsv.h;\n    hsl.l = (2 - hsv.s) * hsv.v;\n    hsl.s = hsv.s * hsv.v;\n    hsl.s /= (hsl.l <= 1) ? (hsl.l) : (2 - hsl.l);\n    hsl.l /= 2;\n\n    if (isNaN(hsl.s)) {\n      hsl.s = 0;\n    }\n    return hsl;\n  };\n\n  /**\n   * Converts from HSL to RGB.\n   * HSL should have keys h, s, l.\n   * RGB will have keys r, g, b.\n   */\n  Util.hslToRgb = function(hsl) {\n    var h = Util.clamp((hsl.h || hsl.hue), 0, 360);\n    var s = Util.clamp(hsl.s || hsl.saturation);\n    var l = Util.clamp(hsl.l || hsl.lightness);\n    var hsv = {};\n    hsv.h = h;\n    s *= (l < 0.5) ? l : 1 - l;\n    hsv.s = (2 * s) / (l + s);\n    hsv.v = l + s;\n    return Util.hsvToRgb(hsv);\n  };\n\n  /**\n   * Turns an rgb color into a LAB color.\n   */\n  Util.rgbToLab = function(rgb) {\n    // RGB to XYZ\n    rgb = {\n      r: rgb.r / 255,\n      g: rgb.g / 255,\n      b: rgb.b / 255\n    };\n\n    var xyz, tc;\n\n    for (tc in rgb) {\n      if (rgb[tc] > 0.04045) {\n        rgb[tc] = Math.pow(((rgb[tc] + 0.055) / 1.055), 2.4);\n      } else {\n        rgb[tc] /= 12.92;\n      }\n\n      rgb[tc] = rgb[tc] * 100;\n    }\n\n    xyz = {\n      x: rgb.r * 0.4124 + rgb.g * 0.3576 + rgb.b * 0.1805,\n      y: rgb.r * 0.2126 + rgb.g * 0.7152 + rgb.b * 0.0722,\n      z: rgb.r * 0.0193 + rgb.g * 0.1192 + rgb.b * 0.9505\n    };\n\n    // XYZ to LAB\n\n    var xyz2 = {};\n    var white = {\n      x: 95.047,\n      y: 100.000,\n      z: 108.883\n    };\n\n    for (tc in xyz) {\n      xyz2[tc] = xyz[tc] / white[tc];\n\n      if (xyz2[tc] > 0.008856) {\n        xyz2[tc] = Math.pow(xyz2[tc], (1 / 3));\n      } else {\n        xyz2[tc] = (7.787 * xyz2[tc]) + (16 / 116);\n      }\n    }\n\n    return {\n      l: 116 * xyz2.y - 16,\n      a: 500 * (xyz2.x - xyz2.y),\n      b: 200 * (xyz2.y - xyz2.z)\n    };\n  };\n\n  /**\n   * Converts an lab color to rgb.\n   */\n  Util.labToRgb = function(lab) {\n    var xyz = {};\n    var rgb = {};\n\n    // LAB to XYZ\n    xyz.y = ((lab.l || lab.L) + 16) / 116;\n    xyz.x = lab.a / 500 + xyz.y;\n    xyz.z = xyz.y - lab.b / 200;\n\n    if (Math.pow(xyz.y,3) > 0.008856) {\n      xyz.y = Math.pow(xyz.y,3);\n    } else {\n      xyz.y = (xyz.y - 16 / 116) / 7.787;\n    }\n\n    if (Math.pow(xyz.x,3) > 0.008856) {\n      xyz.x = Math.pow(xyz.x,3);\n    } else {\n      xyz.x = (xyz.x - 16 / 116) / 7.787;\n    }\n\n    if (Math.pow(xyz.z,3) > 0.008856) {\n      xyz.z = Math.pow(xyz.z,3);\n    } else {\n      xyz.z = (xyz.z - 16 / 116) / 7.787;\n    }\n\n    //  Observer= 2degree, Illuminant= D65\n    xyz.x *=  95.047 / 100;\n    xyz.y *= 100.000 / 100;\n    xyz.z *= 108.883 / 100;\n\n    //  XYZ to RGB\n    rgb.r = xyz.x *  3.2406 + xyz.y * -1.5372 + xyz.z * -0.4986;\n    rgb.g = xyz.x * -0.9689 + xyz.y *  1.8758 + xyz.z *  0.0415;\n    rgb.b = xyz.x *  0.0557 + xyz.y * -0.2040 + xyz.z *  1.0570;\n\n    if (rgb.r > 0.0031308) {\n      rgb.r = 1.055 * Math.pow(rgb.r, (1 / 2.4)) - 0.055;\n    } else {\n      rgb.r *= 12.92;\n    }\n\n    if (rgb.g > 0.0031308) {\n      rgb.g = 1.055 * Math.pow(rgb.g, (1 / 2.4)) - 0.055;\n    } else {\n      rgb.g *= 12.92;\n    }\n\n    if (rgb.b > 0.0031308) {\n      rgb.b = 1.055 * Math.pow(rgb.b, (1 / 2.4)) - 0.055;\n    } else {\n      rgb.b *= 12.92;\n    }\n\n    rgb.r = Util.clamp(rgb.r * 255, 0, 255);\n    rgb.g = Util.clamp(rgb.g * 255, 0, 255);\n    rgb.b = Util.clamp(rgb.b * 255, 0, 255);\n\n    return rgb;\n  };\n\n  /**\n   * Converts from CSS to RGB.\n   */\n  Util.parseCss = function(css) {\n    var color = {};\n    var shorthandRegex = /^#[0-9a-f]{3}$/i;\n    var shorthandMatch = css.match(shorthandRegex);\n    if (shorthandMatch) {\n      color = {\n        r: parseInt(css.charAt(1), 16) * 0x11,\n        g: parseInt(css.charAt(2), 16) * 0x11,\n        b: parseInt(css.charAt(3), 16) * 0x11\n      };\n      return Util.normalize(color);\n    }\n    var longhandRegex = /^#[0-9a-f]{6}$/i;\n    var longhandMatch = css.match(longhandRegex);\n    if (longhandMatch) {\n      color = {\n        r: parseInt(css.slice(1,3), 16),\n        g: parseInt(css.slice(3,5), 16),\n        b: parseInt(css.slice(5,7), 16)\n      };\n      return Util.normalize(color);\n    }\n    var rgbRegex = /^rgb\\(\\s*([0-9]+),\\s*([0-9]+),\\s*([0-9]+)\\s*\\)$/i;\n    var rgbMatch = css.match(rgbRegex);\n    if (rgbMatch) {\n      color = {\n        r: parseInt(rgbMatch[1], 10),\n        g: parseInt(rgbMatch[2], 10),\n        b: parseInt(rgbMatch[3], 10)\n      };\n      return Util.normalize(color);\n    }\n    var rgbaRegex = /^rgba\\(\\s*([0-9]+),\\s*([0-9]+),\\s*([0-9]+),\\s*([0-9\\.]+)\\s*\\)$/i;\n    var rgbaMatch = css.match(rgbaRegex);\n    if (rgbaMatch) {\n      color = {\n        r: parseInt(rgbaMatch[1], 10),\n        g: parseInt(rgbaMatch[2], 10),\n        b: parseInt(rgbaMatch[3], 10),\n        a: parseFloat(rgbaMatch[4])\n      };\n      return Util.normalize(color);\n    }\n\n    // If we can't parse it, we throw a TypeError.\n    throw new TypeError(css + ' is not a valid CSS string for Spectra.');\n  };\n\n  /**\n   * Converts a predefined color string to a Spectra object\n   * Eg Util.parsePredefinedColor('white') === Spectra('#ffffff') === Spectra('{r: 255, g: 255, b: 255}');\n   */\n  Util.parsePredefinedColor = function (string) {\n    return new Spectra.fn(predefinedColors[string]);\n  };\n\n  /**\n   * Performs any conversions necessary to turn the arg into a Spectra object.\n   */\n  Util.normalize = function(arg) {\n    arg.a = arg.a || 1;\n\n    var color = arg;\n\n    // Perform conversions if necessary.\n    if (color.hsv !== undefined) {\n      color = Util.hsvToRgb(color.hsv);\n      color.a = arg.a;\n    } else if (color.hsl !== undefined) {\n      color = Util.hslToRgb(color.hsl);\n      color.a = arg.a;\n    } else if (color.css !== undefined) {\n      color = Util.parseCss(color.css);\n    } else if (color.lab !== undefined) {\n      color = Util.labToRgb(color.lab);\n      color.a = arg.a;\n    }\n\n    // Convert any full words into the abbreviated versions.\n    color.r = color.red || color.r;\n    color.g = color.green || color.g;\n    color.b = color.blue || color.b;\n    color.a = color.alpha || color.a;\n\n    // Place all values in a valid range.\n    color.r = Util.clamp(color.r, 0, 255);\n    color.g = Util.clamp(color.g, 0, 255);\n    color.b = Util.clamp(color.b, 0, 255);\n    color.a = Util.clamp(color.a, 0, 1);\n\n    return color;\n  };\n\n  /**\n   * Constructor for Spectra object.\n   * @constructor\n   */\n  var Spectra = function(arg) {\n    return new Spectra.fn(arg);\n  };\n\n  Spectra.fn = function(arg) {\n    if (arg === null || arg === undefined) {\n      throw new TypeError('Spectra argument must be defined.');\n    }\n    if (arg instanceof Spectra.fn) {\n      return arg;\n    }\n    if (typeof arg === 'object') {\n      if (arg.r !== undefined || arg.red !== undefined) {\n        this.color = Util.normalize({r: arg.r, g: arg.g, b: arg.b, a: arg.a});\n      } else if (arg.v !== undefined || arg.value !== undefined) {\n        this.color = Util.normalize({hsv: arg, a: arg.a});\n      } else if ((arg.l !== undefined || arg.lightness !== undefined) &&\n        (arg.s !== undefined || arg.saturation !== undefined)) {\n        this.color = Util.normalize({hsl: arg, a: (arg.a || arg.alpha)});\n      } else if ((arg.l !== undefined || arg.L !== undefined) && (arg.a !== undefined)) {\n        this.color = Util.normalize({lab: arg, a: (arg.a || arg.alpha)});\n      } else {\n        throw new TypeError('Spectra argument ' + arg + ' is invalid.');\n      }\n    } else if (typeof arg === 'string') {\n      if (arg.toLowerCase() in predefinedColors) {\n        return Util.parsePredefinedColor(arg);\n      }\n      this.color = Util.normalize({css: arg});\n    } else {\n      throw new TypeError('Spectra argument ' + arg + ' is invalid.');\n    }\n    return this;\n  };\n\n  /**\n   * Get and set.\n   * These functions take an optional argument.\n   * If it is specified, the property is changed and the object is returned.\n   * Otherwise, the property value is returned.\n   */\n  Spectra.fn.prototype.red = function(arg) {\n    var color = this.color;\n    if (arguments.length) {\n      color.r = arg;\n      this.color = Util.normalize(color);\n      return this;\n    } else {\n      return Math.round(color.r);\n    }\n  };\n  Spectra.fn.prototype.green = function(arg) {\n    var color = this.color;\n    if (arguments.length) {\n      color.g = arg;\n      this.color = Util.normalize(color);\n      return this;\n    } else {\n      return Math.round(color.g);\n    }\n  };\n  Spectra.fn.prototype.blue = function(arg) {\n    var color = this.color;\n    if (arguments.length) {\n      color.b = arg;\n      this.color = Util.normalize(color);\n      return this;\n    } else {\n      return Math.round(color.b);\n    }\n  };\n  Spectra.fn.prototype.hue = function(arg) {\n    var color = Util.rgbToHsv(this.color);\n    if (arguments.length) {\n      color.h = arg;\n      this.color = Util.normalize({hsv: color, a: this.color.a});\n      return this;\n    } else {\n      return Math.round(color.h);\n    }\n  };\n  Spectra.fn.prototype.saturationv = function(arg) {\n    var color = Util.rgbToHsv(this.color);\n    if (arguments.length) {\n      color.s = arg;\n      this.color = Util.normalize({hsv: color, a: this.color.a});\n      return this;\n    } else {\n      return color.s;\n    }\n  };\n  Spectra.fn.prototype.value = function(arg) {\n    var color = Util.rgbToHsv(this.color);\n    if (arguments.length) {\n      color.v = arg;\n      this.color = Util.normalize({hsv: color, a: this.color.a});\n      return this;\n    } else {\n      return color.v;\n    }\n  };\n  Spectra.fn.prototype.saturation = function(arg) {\n    var color = Util.rgbToHsl(this.color);\n    if (arguments.length) {\n      color.s = arg;\n      this.color = Util.normalize({hsl: color, a: this.color.a});\n      return this;\n    } else {\n      return color.s;\n    }\n  };\n  Spectra.fn.prototype.lightness = function(arg) {\n    var color = Util.rgbToHsl(this.color);\n    if (arguments.length) {\n      color.l = arg;\n      this.color = Util.normalize({hsl: color, a: this.color.a});\n      return this;\n    } else {\n      return color.l;\n    }\n  };\n  Spectra.fn.prototype.alpha = function(arg) {\n    var color = this.color;\n    if (arguments.length) {\n      color.a = arg;\n      return this;\n    } else {\n      return color.a;\n    }\n  };\n\n  Spectra.fn.prototype.hex = function() {\n    // Pad the strings so that they are all 2 digits long, and concatenate.\n    var rString = ('0' + this.red().toString(16)).slice(-2);\n    var gString = ('0' + this.green().toString(16)).slice(-2);\n    var bString = ('0' + this.blue().toString(16)).slice(-2);\n    return '#' + rString + gString + bString;\n  };\n\n  Spectra.fn.prototype.rgbaString = function() {\n    return 'rgba(' + this.red() + ',' + this.green() + ',' + this.blue() + ',' + this.alpha() + ')';\n  };\n\n  Spectra.fn.prototype.hslString = function() {\n    return 'hsl(' + this.hue() + ',' + this.saturation() + ',' +\n                    (Math.round(this.lightness()*100) / 100) + ')';\n  };\n\n  Spectra.fn.prototype.hslaString = function() {\n    return 'hsla(' + this.hue() + ',' + this.saturation() + ',' +\n                     (Math.round(this.lightness()*100) / 100) + ',' +\n                     this.alpha() + ')';\n  };\n\n  Spectra.fn.prototype.rgbNumber = function() {\n    return (this.red() << 16) | (this.green() << 8) | (this.blue());\n  };\n\n  Spectra.fn.prototype.labObject = function() {\n    return Util.rgbToLab(this.color);\n  };\n\n  /**\n   * Use hex string function for toString() operations\n   * to allow direct assignment to CSS properties\n   */\n  Spectra.fn.prototype.toString = Spectra.fn.prototype.hex;\n\n  /**\n   * API Functions\n   * =============\n   *\n   * Below are any API functions that do not modify the current color, but return values based\n   * on the current color. As such, use red(), green(), etc. instead of actually accessing this.color.\n   */\n\n  /**\n   * Tests to see if this color is equal to other.\n   * Because other is also a color, it follows that we can simply compare red, green, blue, and alpha\n   * to see if the colors are equal.\n   */\n  Spectra.fn.prototype.equals = function(other) {\n    var color1 = this;\n    var color2 = other;\n\n    if (arguments.length < 1) {\n      return color1 === color2;\n    }\n\n    return color1.near(color2, 0);\n  };\n\n  /**\n   * Tests to see if an other color is within a percentage range of this color.\n   */\n  Spectra.fn.prototype.near = function(other, percentage) {\n    var color1 = this;\n    var color2 = other;\n\n    percentage = Math.abs(percentage || 0);\n    var adjustment = 255 * (percentage / 100);\n\n    return (Math.abs(color2.red() - color1.red()) <= adjustment) &&\n           (Math.abs(color2.green() - color1.green()) <= adjustment) &&\n           (Math.abs(color2.blue() - color1.blue()) <= adjustment) &&\n           (Math.abs(color2.alpha() - color1.alpha()) <= (percentage / 100));\n  };\n\n  /**\n   * Returns the complement of this color.\n   */\n  Spectra.fn.prototype.complement = function() {\n    var newColor = new Spectra(this.color);\n    newColor.hue((newColor.hue() + 180) % 360);\n    return newColor;\n  };\n\n  /**\n   * Negates this color.\n   * For a color {R, G, B}, returns a new color {R', G', B'}, where R' = 255 - R and so on.\n   */\n  Spectra.fn.prototype.negate = function() {\n    var newColor = new Spectra(this.color);\n    newColor.red(255 - newColor.red());\n    newColor.green(255 - newColor.green());\n    newColor.blue(255 - newColor.blue());\n    return newColor;\n  };\n\n  /**\n   * Lightens a color based on percentage value from 1 to 100.\n   */\n  Spectra.fn.prototype.lighten = function(percentage) {\n    var newColor = new Spectra(this.color);\n    var l = Util.clamp(newColor.lightness() + (percentage / 100), 0, 1);\n    newColor.lightness(l);\n    return newColor;\n  };\n\n  /**\n   * Darkens a color based on percentage value from 1 to 100.\n   */\n  Spectra.fn.prototype.darken = function(percentage) {\n    return this.lighten(-percentage);\n  };\n\n  /**\n   * Lightens or darkens a color based on a random value in the specified range.\n   * Percentage should be passed in as an integer, so 40 would lighten or darken up to 40%.\n   */\n  Spectra.fn.prototype.randomColorRange = function(percentage) {\n    var adjustment = ((Math.random() * 2) - 1) * percentage;\n    var newColor = new Spectra(this.color);\n    newColor = newColor.lighten(adjustment);\n    return newColor;\n  };\n\n  /**\n   * Adds saturation to the color based on a percentage value.\n   */\n  Spectra.fn.prototype.saturate = function(percentage) {\n    var p = percentage / 100;\n    var newColor = new Spectra(this.color);\n    newColor.saturation(newColor.saturation() + p);\n    return newColor;\n  };\n\n  /**\n   * Desaturates the color based on a percentage value.\n   */\n  Spectra.fn.prototype.desaturate = function(percentage) {\n    var p = percentage / 100;\n    var newColor = new Spectra(this.color);\n    newColor.saturation(newColor.saturation() - p);\n    return newColor;\n  };\n\n  /**\n   * Fades in the current color based on a percentage value, making it less transparent.\n   */\n  Spectra.fn.prototype.fadeIn = function(percentage) {\n    var p = percentage / 100;\n    var newColor = new Spectra(this.color);\n    newColor.alpha(newColor.alpha() + p);\n    return newColor;\n  };\n\n  /**\n   * Fades out the current color based on a percentage value, making it less transparent.\n   */\n  Spectra.fn.prototype.fadeOut = function(percentage) {\n    var p = percentage / 100;\n    var newColor = new Spectra(this.color);\n    newColor.alpha(newColor.alpha() - p);\n    return newColor;\n  };\n\n  /**\n   * Calculates the luma of the color, i.e. how it appears on screen.\n   */\n  Spectra.fn.prototype.luma = function() {\n    return (0.2126 * this.red()) + (0.7152 * this.green()) + (0.0722 * this.blue());\n  };\n\n  /**\n   * Returns a Spectra object, which is the grayscale of the current color.\n   */\n  Spectra.fn.prototype.grayscale = function() {\n    return this.desaturate(100);\n  };\n\n  /**\n   * If a color is dark then it's best to have white text on it.\n   * http://24ways.org/2010/calculating-color-contrast\n   */\n  Spectra.fn.prototype.isDark = function() {\n    var yiq = ((this.red()*299)+(this.green()*587)+(this.blue()*144))/1000;\n    return yiq < 131.5;\n  };\n\n  /**\n   * If a color is light then it's best to have black text on it.\n   */\n  Spectra.fn.prototype.isLight = function() {\n    return !this.isDark();\n  };\n\n  /**\n   * Returns the color that results from mixing percent of the other color into this color.\n   */\n  Spectra.fn.prototype.mix = function(other, percentage) {\n    other = new Spectra(other);\n    var p = arguments.length < 2 ? 0.5 : percentage / 100;\n    return new Spectra({\n      r: this.red() * (1 - p) + other.red() * p,\n      g: this.green() * (1 - p) + other.green() * p,\n      b: this.blue() * (1 - p) + other.blue() * p,\n      a: this.alpha() * (1 - p) + other.alpha() * p\n    });\n  };\n\n  /**\n   * Returns a number from 0 to 1 representing the color contrast between the two colors.\n   */\n  Spectra.fn.prototype.contrast = function(other) {\n    other = new Spectra(other);\n    var diff = Math.max(this.red(), other.red()) - Math.min(this.red(), other.red()) +\n               Math.max(this.green(), other.green()) - Math.min(this.green(), other.green()) +\n               Math.max(this.blue(), other.blue()) - Math.min(this.blue(), other.blue());\n    return diff / 765;\n  };\n\n  /**\n   * Returns a gradient of colors approximately from this color to the other, consisting of n colors.\n   */\n  Spectra.fn.prototype.gradient = function(other, n) {\n    other = new Spectra(other);\n    var gradient = [];\n    var r = this.red();\n    var g = this.green();\n    var b = this.blue();\n    var dr = (other.red() - this.red()) / (n - 1);\n    var dg = (other.green() - this.green()) / (n - 1);\n    var db = (other.blue() - this.blue()) / (n - 1);\n\n    for (var i = 0; i < n; i++) {\n      gradient.push(new Spectra({r: r, g: g, b: b}));\n      r += dr;\n      g += dg;\n      b += db;\n    }\n\n    return gradient;\n  };\n\n  /**\n   * Harmony\n   *\n   * @desc Returns an array of harmonious colors (goo.gl/R3FRlU).\n   * @author Benjamin Fleming (benjamminf)\n   * @since 2014-01-06\n   * @param type (string) - Type of harmony.\n   * @param index (int) - At which point the original color exists on the set harmonies. Since\n   *   some types of color harmonies have inconsistent offsets (eg. rectangle) it's useful to\n   *   note where this original color lies on the set harmony hues.\n   * @return Array of Spectra instances.\n   */\n  Spectra.fn.prototype.harmony = function(type, index) {\n    index = typeof index === 'number' ? Math.abs(parseInt(index, 10)) : 0;\n\n    var colors = [];\n    var hsv = Util.rgbToHsv(this.color);\n    var hues = [0, 180];\n\n    switch (type) {\n      case 'analogous':\n        hues = [0, 30, 60];\n        break;\n      case 'triad':\n        hues = [0, 120, 240];\n        break;\n      case 'split-complementary':\n        hues = [0, 150, 210];\n        break;\n      case 'rectangle':\n        hues = [0, 60, 180, 240];\n        break;\n      case 'square':\n        hues = [0, 90, 180, 270];\n        break;\n      case 'complementary':\n        hues = [0, 180];\n        break;\n    }\n\n    var n = hues.length;\n    var offset = hues[index % n];\n\n    for (var i = 0; i < n; i++) {\n      colors.push(new Spectra({\n        h: (hsv.h + hues[i] - offset) % 360,\n        s:  hsv.s,\n        v:  hsv.v,\n        a: this.color.a\n      }));\n    }\n\n    return colors;\n  };\n\n  /**\n   * Restores the old value of Spectra and returns the wrapper function.\n   */\n  Spectra.noConflict = function() {\n    root.Spectra = oldSpectra;\n    return Spectra;\n  };\n\n  /**\n   * Generates a random color.\n   */\n  Spectra.random = function() {\n    return new Spectra({\n      r: Math.floor(Math.random() * 255),\n      g: Math.floor(Math.random() * 255),\n      b: Math.floor(Math.random() * 255)\n    });\n  };\n\n  // Set the global variable Spectra to the wrapper that we have defined.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined') {\n      exports = module.exports = Spectra;\n    }\n    exports.Spectra = Spectra;\n  } else {\n    root.Spectra = Spectra;\n  }\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}